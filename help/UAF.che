\title History of UAF
\ident UAF_History
\keys History;About
\browse About UA Forever
\heading UAF History
{\b\cf1 UAF History}
Dungeon Craft is an effort to develop an RPG and editor that mimics SSIs Forgotten Realms Unlimited Adventures (FRUA). This project began back in 1995 as an effort to learn more about Windows/DirectX programming. The itch to start UAF came about after picking up a book called "Windows 95 Game SDK Strategy Guide" by Clayton Walnum. In it the author described how to make the pseudo-3d viewpoint used by FRUA when the party is adventuring. Then another book was published called  "Spells of Fury, Building Windows 95 Games Using DirectX 2" by Michael Norton which described a way of making a tile-based map similar to the FRUA combat screens. Putting the two pieces together was a good start towards cloning FRUA, and learn more about DirectX (formerly Game SDK).

The original UA inspired many people to develop their own RPG games.  An internet mailing list was set up and people traded their games and thoughts. A large part of the effort to develop games was spent in what was termed 'hacking' ...an attempt to bypass many of the limitations of the original DOS-based game. Everyone thought it would be a great idea to develop a Windows-based system that would not have all these limitations.  Many people thought it would be a simple matter to write such a program.  Many attempts were made without success. I would not call Dungeon Craft a success yet, but it has made more progress towards completion than other attempts so far. Certainly Dungeon Craft is far from being a completely functional clone of FRUA. Yet slow and steady progress is made, and hopefully with the help the internet community, faster progress can be achieved.

I am very thankful for all those who have helped with this project. As the list of people who have helped grows it becomes difficult to mention all of them.

With a project this large, there are going to be features that are not tested with every release. Although testing is done on the new features, rarely do we go back and re-test older code. This means that there is ample opportunity for bugs to manifest themselves. Several people have taken the time to report bugs and for that we thank you.

You will see the terms Dungeon Craft and UAForever (UAF) used interchangeably. UAF was the original name and can still be seen in many places. Dungeon Craft is the new name, although I see that WOTC/TSR are now using the same name for a series of articles so I may need to change the name again sometime soon.
\page
\title Contact
\ident Contact
\keys Contact
\browse About UA Forever
\heading Contact

{\b\cf1 Contact}

You can get the latest info about Dungeon Craft, and download the latest version from one of the following sites:

{\uldb http://uaf.sourceforge.net}{\v !ExecFile(http://uaf.sourceforge.net)}
{\uldb http://sourceforge.net/projects/uaf/}{\v !ExecFile(http://sourceforge.net/projects/uaf/)}
{\uldb http://www.DungeonCraft.dns2go.com}{\v !ExecFile(http://www.DungeonCraft.dns2go.com)}

Feel free to report opinions or bugs via email to {\uldb CocoaSpud@hotmail.com}{\v !ExecFile(mailto:cocoaspud@hotmail.com)}, or you can visit the Dungeon Craft development homepage to access the bug list at

{\uldb http://sourceforge.net/projects/uaf/}{\v !ExecFile(http://sourceforge.net/projects/uaf/)}

If you are contacting me because something is not working, please read the section on {\uldb Encountering Problems}{\v !KLink(Encountering Problems)}.
\page
\title Minimum Requirements
\ident Minimum_Requirements
\keys Minimum Requirements
\browse About UA Forever
\heading Minimum Requirements

{\b\cf1 Minimum Requirements}

To use Dungeon Craft, you must have

DirectX 3 or higher
Pentium CPU
Windows 95/98/NT4/2000

800x600 screen resolution is recommended for the editor, but not required.

If you want to compile the Dungeon Craft source code then read the {\uldb Coding Notes}{\v Coding_Notes}.
\page
\title Features
\ident Features
\keys Features
\browse About UA Forever
\heading Features

{\b Features}

Dungeon Craft is an adventure creator that is based on the AD&D gaming system. It mimics the features and functionality of SSI's Forgotten Realms Unlimited Adventures.

While FRUA is DOS based, Dungeon Craft is Win32 based and currently runs under Windows 95/98/NT/2000 using DirectX 3.

Some improvements over the DOS based product have been made:

{\S3 }supports 16/24/32 bit color
{\S3 }supports BMP, PCX, TGA, JPG, PNG, WAV, MIDI, and MP3 file types
{\S3 }640x480, 800x600, and 1024x768 screen sizes
{\S3 }Editable items, spells and monsters
{\S3 }Increased capacity for maps, events, quests, special items, and text
{\S3 }Each design is self-contained, the editor is not required to play the game
{\S3 }All art can be customized
{\S3 }Area view can be configured to auto map, display the whole map, or no map.
{\S3 }Text events can be interactive with the player
{\S3 }Powerful script engine allows map modifications at runtime

Plus, new features, event triggers, etc, can be added as desired. Just send me your suggestions.

{\b Features Not Complete}

Dungeon Craft is still under development, and some things are still in the works:

{\S3 }Combat is not totally complete
{\S3 }Magic, Spell casting not complete yet
\page
\title Change History
\ident Change_History
\keys Change History
\browse About UA Forever
\heading Change History

{\b\cf1 Change History}

Click {\uldb here}{\v !ExecFile(help\\ChangeHistory.txt)} to view change history notes.
\page
\title Forever Free
\ident Forever_Free
\keys Forever Free
\browse License
\heading Forever Free

{\b\cf1 Forever Free}
Dungeon Craft will never cost anything, and the source code will always be included. We do this to satisfy our own urge to write code, not to profit from it. Dungeon Craft is released under the {\uldb GPL license}{\v !KLink(Gnu Public License)}.

Below is the WOTC summary statement concerning copyright and AD&D that was in effect when this project was made available to the public.

Original link (which no longer works):
http://www.wizards.com/contactinfo/TSR_Online_Policy.asp

We have been getting a lot of "is this OK to do this under the policy" questions. Let us clear it up right now. According to the policy above), as long as (1) you're not copying our text, (2) you're not copying our art, (3) you're not copying our logos, and (4) you're not making money off of it, you can use our properties to make your own fan material (within good taste - no porn, etc.). That's it. Make your stuff. Have fun.
\page
\title Gnu Public License
\ident Gnu_Public_License
\keys Gnu Public License
\browse License
\heading Gnu Public License

{\b\cf1 Gnu Public License}
{\qc}
		    GNU GENERAL PUBLIC LICENSE
		       Version 2, June 1991

 Copyright (C) 1989, 1991 Free Software Foundation, Inc.
                       59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

			    Preamble

  The licenses for most software are designed to take away your
freedom to share and change it.  By contrast, the GNU General Public
License is intended to guarantee your freedom to share and change free
software--to make sure the software is free for all its users.  This
General Public License applies to most of the Free Software
Foundation's software and to any other program whose authors commit to
using it.  (Some other Free Software Foundation software is covered by
the GNU Library General Public License instead.)  You can apply it to
your programs, too.

  When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
this service if you wish), that you receive source code or can get it
if you want it, that you can change the software or use pieces of it
in new free programs; and that you know you can do these things.

  To protect your rights, we need to make restrictions that forbid
anyone to deny you these rights or to ask you to surrender the rights.
These restrictions translate to certain responsibilities for you if you
distribute copies of the software, or if you modify it.

  For example, if you distribute copies of such a program, whether
gratis or for a fee, you must give the recipients all the rights that
you have.  You must make sure that they, too, receive or can get the
source code.  And you must show them these terms so they know their
rights.

  We protect your rights with two steps: (1) copyright the software, and
(2) offer you this license which gives you legal permission to copy,
distribute and/or modify the software.

  Also, for each author's protection and ours, we want to make certain
that everyone understands that there is no warranty for this free
software.  If the software is modified by someone else and passed on, we
want its recipients to know that what they have is not the original, so
that any problems introduced by others will not reflect on the original
authors' reputations.

  Finally, any free program is threatened constantly by software
patents.  We wish to avoid the danger that redistributors of a free
program will individually obtain patent licenses, in effect making the
program proprietary.  To prevent this, we have made it clear that any
patent must be licensed for everyone's free use or not licensed at all.

  The precise terms and conditions for copying, distribution and
modification follow.
		    GNU GENERAL PUBLIC LICENSE
   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION

  0. This License applies to any program or other work which contains
a notice placed by the copyright holder saying it may be distributed
under the terms of this General Public License.  The "Program", below,
refers to any such program or work, and a "work based on the Program"
means either the Program or any derivative work under copyright law:
that is to say, a work containing the Program or a portion of it,
either verbatim or with modifications and/or translated into another
language.  (Hereinafter, translation is included without limitation in
the term "modification".)  Each licensee is addressed as "you".

Activities other than copying, distribution and modification are not
covered by this License; they are outside its scope.  The act of
running the Program is not restricted, and the output from the Program
is covered only if its contents constitute a work based on the
Program (independent of having been made by running the Program).
Whether that is true depends on what the Program does.

  1. You may copy and distribute verbatim copies of the Program's
source code as you receive it, in any medium, provided that you
conspicuously and appropriately publish on each copy an appropriate
copyright notice and disclaimer of warranty; keep intact all the
notices that refer to this License and to the absence of any warranty;
and give any other recipients of the Program a copy of this License
along with the Program.

You may charge a fee for the physical act of transferring a copy, and
you may at your option offer warranty protection in exchange for a fee.

  2. You may modify your copy or copies of the Program or any portion
of it, thus forming a work based on the Program, and copy and
distribute such modifications or work under the terms of Section 1
above, provided that you also meet all of these conditions:

    a) You must cause the modified files to carry prominent notices
    stating that you changed the files and the date of any change.

    b) You must cause any work that you distribute or publish, that in
    whole or in part contains or is derived from the Program or any
    part thereof, to be licensed as a whole at no charge to all third
    parties under the terms of this License.

    c) If the modified program normally reads commands interactively
    when run, you must cause it, when started running for such
    interactive use in the most ordinary way, to print or display an
    announcement including an appropriate copyright notice and a
    notice that there is no warranty (or else, saying that you provide
    a warranty) and that users may redistribute the program under
    these conditions, and telling the user how to view a copy of this
    License.  (Exception: if the Program itself is interactive but
    does not normally print such an announcement, your work based on
    the Program is not required to print an announcement.)

These requirements apply to the modified work as a whole.  If
identifiable sections of that work are not derived from the Program,
and can be reasonably considered independent and separate works in
themselves, then this License, and its terms, do not apply to those
sections when you distribute them as separate works.  But when you
distribute the same sections as part of a whole which is a work based
on the Program, the distribution of the whole must be on the terms of
this License, whose permissions for other licensees extend to the
entire whole, and thus to each and every part regardless of who wrote it.

Thus, it is not the intent of this section to claim rights or contest
your rights to work written entirely by you; rather, the intent is to
exercise the right to control the distribution of derivative or
collective works based on the Program.

In addition, mere aggregation of another work not based on the Program
with the Program (or with a work based on the Program) on a volume of
a storage or distribution medium does not bring the other work under
the scope of this License.

  3. You may copy and distribute the Program (or a work based on it,
under Section 2) in object code or executable form under the terms of
Sections 1 and 2 above provided that you also do one of the following:

    a) Accompany it with the complete corresponding machine-readable
    source code, which must be distributed under the terms of Sections
    1 and 2 above on a medium customarily used for software interchange; or,

    b) Accompany it with a written offer, valid for at least three
    years, to give any third party, for a charge no more than your
    cost of physically performing source distribution, a complete
    machine-readable copy of the corresponding source code, to be
    distributed under the terms of Sections 1 and 2 above on a medium
    customarily used for software interchange; or,

    c) Accompany it with the information you received as to the offer
    to distribute corresponding source code.  (This alternative is
    allowed only for noncommercial distribution and only if you
    received the program in object code or executable form with such
    an offer, in accord with Subsection b above.)

The source code for a work means the preferred form of the work for
making modifications to it.  For an executable work, complete source
code means all the source code for all modules it contains, plus any
associated interface definition files, plus the scripts used to
control compilation and installation of the executable.  However, as a
special exception, the source code distributed need not include
anything that is normally distributed (in either source or binary
form) with the major components (compiler, kernel, and so on) of the
operating system on which the executable runs, unless that component
itself accompanies the executable.

If distribution of executable or object code is made by offering
access to copy from a designated place, then offering equivalent
access to copy the source code from the same place counts as
distribution of the source code, even though third parties are not
compelled to copy the source along with the object code.

  4. You may not copy, modify, sublicense, or distribute the Program
except as expressly provided under this License.  Any attempt
otherwise to copy, modify, sublicense or distribute the Program is
void, and will automatically terminate your rights under this License.
However, parties who have received copies, or rights, from you under
this License will not have their licenses terminated so long as such
parties remain in full compliance.

  5. You are not required to accept this License, since you have not
signed it.  However, nothing else grants you permission to modify or
distribute the Program or its derivative works.  These actions are
prohibited by law if you do not accept this License.  Therefore, by
modifying or distributing the Program (or any work based on the
Program), you indicate your acceptance of this License to do so, and
all its terms and conditions for copying, distributing or modifying
the Program or works based on it.

  6. Each time you redistribute the Program (or any work based on the
Program), the recipient automatically receives a license from the
original licensor to copy, distribute or modify the Program subject to
these terms and conditions.  You may not impose any further
restrictions on the recipients' exercise of the rights granted herein.
You are not responsible for enforcing compliance by third parties to
this License.

  7. If, as a consequence of a court judgment or allegation of patent
infringement or for any other reason (not limited to patent issues),
conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot
distribute so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you
may not distribute the Program at all.  For example, if a patent
license would not permit royalty-free redistribution of the Program by
all those who receive copies directly or indirectly through you, then
the only way you could satisfy both it and this License would be to
refrain entirely from distribution of the Program.

If any portion of this section is held invalid or unenforceable under
any particular circumstance, the balance of the section is intended to
apply and the section as a whole is intended to apply in other
circumstances.

It is not the purpose of this section to induce you to infringe any
patents or other property right claims or to contest validity of any
such claims; this section has the sole purpose of protecting the
integrity of the free software distribution system, which is
implemented by public license practices.  Many people have made
generous contributions to the wide range of software distributed
through that system in reliance on consistent application of that
system; it is up to the author/donor to decide if he or she is willing
to distribute software through any other system and a licensee cannot
impose that choice.

This section is intended to make thoroughly clear what is believed to
be a consequence of the rest of this License.

  8. If the distribution and/or use of the Program is restricted in
certain countries either by patents or by copyrighted interfaces, the
original copyright holder who places the Program under this License
may add an explicit geographical distribution limitation excluding
those countries, so that distribution is permitted only in or among
countries not thus excluded.  In such case, this License incorporates
the limitation as if written in the body of this License.

  9. The Free Software Foundation may publish revised and/or new versions
of the General Public License from time to time.  Such new versions will
be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.

Each version is given a distinguishing version number.  If the Program
specifies a version number of this License which applies to it and "any
later version", you have the option of following the terms and conditions
either of that version or of any later version published by the Free
Software Foundation.  If the Program does not specify a version number of
this License, you may choose any version ever published by the Free Software
Foundation.

  10. If you wish to incorporate parts of the Program into other free
programs whose distribution conditions are different, write to the author
to ask for permission.  For software which is copyrighted by the Free
Software Foundation, write to the Free Software Foundation; we sometimes
make exceptions for this.  Our decision will be guided by the two goals
of preserving the free status of all derivatives of our free software and
of promoting the sharing and reuse of software generally.

			    NO WARRANTY

  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
REPAIR OR CORRECTION.

  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.

		     END OF TERMS AND CONDITIONS

	    How to Apply These Terms to Your New Programs

  If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these terms.

  To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
convey the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

    <one line to give the program's name and a brief idea of what it does.>
    Copyright (C) 19yy  <name of author>

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA


Also add information on how to contact you by electronic and paper mail.

If the program is interactive, make it output a short notice like this
when it starts in an interactive mode:

    Gnomovision version 69, Copyright (C) 19yy name of author
    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
    This is free software, and you are welcome to redistribute it
    under certain conditions; type `show c' for details.

The hypothetical commands `show w' and `show c' should show the appropriate
parts of the General Public License.  Of course, the commands you use may
be called something other than `show w' and `show c'; they could even be
mouse-clicks or menu items--whatever suits your program.

You should also get your employer (if you work as a programmer) or your
school, if any, to sign a "copyright disclaimer" for the program, if
necessary.  Here is a sample; alter the names:

  Yoyodyne, Inc., hereby disclaims all copyright interest in the program
  `Gnomovision' (which makes passes at compilers) written by James Hacker.

  <signature of Ty Coon>, 1 April 1989
  Ty Coon, President of Vice

This General Public License does not permit incorporating your program into
proprietary programs.  If your program is a subroutine library, you may
consider it more useful to permit linking proprietary applications with the
library.  If this is what you want to do, use the GNU Library General
Public License instead of this License.
\page
\title Installing UAF
\ident Installing_UAF
\keys Installing UAF
\browse Installation
\heading Installing UAF

{\b\cf1 Installing UAF}

The first step of installation is to download the latest build. See {\uldb here}{\v !KLink(Contact)} for details.

Double-click the downloaded file and Dungeon Craft will install itself. After the installation is completed there will be several folders created under the root Dungeon Craft install folder.

UAF             - root install folder
UAF/DefaultArt  - contains all default art and sound files used by editor
UAF/GPDL        - GPDL script engine executables
UAF/help        - source for the help file
UAF/UAFWin      - contains UAFWin.exe, the engine used to play a saved design
UAF/UAFWinEd    - contains UAFWinEd.exe, the editor used to create a design
UAF/src         - contains all source code
UAF/BACKUP      - backup of files updated during most recent install

Dungeon Craft is composed of two executables. UAFWinEd.exe is the editor, and UAFWin.exe is the game engine. The editor creates a stand-alone design that includes all art, sounds, config files. The GPDL script engine is a separate executable that is used from a command line.

To begin using Dungeon Craft, double-click on UAFWinEd.exe to create a design. Add some wall sections to the map using the mouse, save the design, then exit. At this point you will have created a new folder in the Dungeon Craft install folder called "Default Design.dsn". In this folder is a self-contained design that will not need the editor to be played. Find the 'Start' shortcut in this folder and double-click it to play the design. Once the engine begins you will be presented with the character creation screens. Once your character is created, select "Begin Adventuring" and you will be walking around on the map you just created.

Dungeon Craft relies on Microsoft DirectX. Most computers will already have DirectX installed on them and Dungeon Craft will work just fine. If all of your images are displayed in a garbled manner, or if you receive a warning message that the minimum DirectX version is not installed, you should download and install the latest DirectX version from the Microsoft website. Before complaining that Dungeon Craft refuses to run on your computer, first make sure another recent game will play correctly. Most newer games also use DirectX, so running one will make sure your DirectX installation is working properly. We are not guru's of DirectX problems, so please send DirectX questions somewhere besides us.
\page
\title Default Art
\ident Default_Art
\keys Default Art
\browse Installation
\heading Default Art

{\b\cf1 Default Art}

The DefaultArt folder is used to hold the default art and sounds used by the editor.

There are several different types of default art. To help recognize the different types using the filename, the following convention is used for default art supplied with Dungeon Craft. Note that the name convention is not required to make your art compatible with Dungeon Craft, it is only a suggested naming convention and is the one followed for most images supplied with Dungeon Craft.

Each filename has the format <type>_<name>.<ext>

where <type> is one of

bp = big picture graphics
cm = combat Monster Icon
cn = combat NPC Icon
cp = combat PC Icon
cw = combat Wall graphics
cww = combat wall wilderness
bo = border/frame graphics
bd = backdrop graphics
wa = wall graphics
dr = door graphics
ov = overlay graphics
it = item graphics
spr = sprite graphics
spl = spell graphics
prt = portrait graphics
sp = small pic graphics
ovl = overland
cu = cursor

<name> is any filename supported by Windows

and <ext> is one of any image extension supported by Dungeon Craft.

An example is: bo_myframe.pcx for a border graphic.

The naming conventions for default art slots are:

There are 48 art slots per level. Art slot 0 is reserved and is always blank (to erase with). The slots will default to the following files if they are present in the DefaultArt folder. To fill wall slot X with a wall, door, and overlay, just name the files:

wa_WallX.pcx
do_DoorX.pcx
ov_OverlayX.pcx

Each slot can be defined by any combination of wall/door/overlay, and only the first 16 slots can be automatically loaded with defaults.

The following files will provide the pool of art the player will choose >from when creating a character during game play. The small pics should have an image that is 176x211. The icons should have the ready and attack pose side-by-side and should be 96x48 for a 1x1 icon. The ready pose should be first in the image.

Icons: cp_Icon1.pcx - cp_Icon50.pcx
SmallPics: sp_SPic1.pcx - sp_SPic50.pcx

To change the remaining default items, delete the current and put in your own with the same name. Don't change the type of file, if the editor expects the default bump sound to be a wave, don't drop in a midi.

The current list of default art:

AreaViewArt - used to draw the blocks in Area View
Background1 - backgrounds
BigPic - big pic
DefCA - default camp art (small pic)
DefCC - default combat cursor
DefCD - default combat death
DefCDI - default combat death icon
DefCW - default combat wall set
DefCWW - default combat wilderness wall set
DefFR - default frame that surrounds 3d view
DefHB - default horizontal bar that makes up top and bottom frame that surrounds screen
DefIB - default icon background, backdrop for icons while player chooses >from icon pool
DefTR - default treasure pic (small pic)
DefVB - default vertical bar that make up frame surrounding the screen
Door2 - sample door
Icon1 - sample icon for icon pool
MapArt - art used to draw the map view
Spic1 - sample small pic for small pic pool
Sprite1  sample sprite, 3 frames
Title - title screen displayed when game engine starts.
Wall1 - sample walls

Some of the artwork comes from generous folks who allowed me to include their stuff with Dungeon Craft:

Backgrounds, Doors, Walls, Combat walls: originally from gpcpart.zip on {\uldb http://www.frua.dns2go.com}{\v !ExecFile(http://www.frua.dns2go.com)}, and courtesy H. Polsa.

One icon and small pics is originally from shamaron.zip on {\uldb http://www.frua.dns2go.com}{\v !ExecFile(http://www.frua.dns2go.com)}, and courtesy D. Autery.

Many of the default images have been created by various people:

D.Huling - {\uldb http://www.tgeweb.com/ironworks}{\v !ExecFile(http://www.tgeweb.com/ironworks)}
J.Dore - {\uldb http://members.optusnet.com.au/~jeremy77/index.html}{\v !ExecFile(http://members.optusnet.com.au/~jeremy77/index.html)}
Manikus - {\uldb http://www.geocities.com/manikus5/dc/index.html}{\v !ExecFile(http://www.geocities.com/manikus5/dc/index.html)}

Some art is from unknown sources. If anyone recognizes them as one of their own and wishes credit for it, or thinks there is some copyright infringement here, please {\uldb contact}{\v !KLink(Contact)} me.
\page
\title Version Numbers
\ident UAF_Version_Numbers
\keys Version Numbers
\browse General
\heading Version Numbers

{\b\cf1 Version Numbers}
Version numbers are everywhere.  Dungeon Craft has version numbers:
{\S3 }Editor Version number
{\S3 }Game design Version number
{\S3 }Runtime Engine Version number

In general, it is the Game Design Version number that determines what a player can or cannot do and how the game works during play.  This version number is kept in the first 8 bytes of the game.dat file.

The Editor maintains the current design version when editing existing designs until the design is saved. The editor will always save design files using the most recent format, with the most recent version number. 

The Editor displays it's own version in the title bar. The title will usually read something like this:

'Dungeon Craft Design Editor - ver 0.760: A Wild Design'

where 'ver 0.760' is the editor version, not the design version. The name of the currently loaded design is 'A Wild Design'.

The Runtime engine displays the it's version in the title screen. The Runtime Engine is supposed to accept older versions of the game, skipping over features that are outmoded, and supplying the proper default values for missing features such that the game should still be playable. If you attempt to play a design with a version number that is higher than the Runtime Engine, it will probably inform you that you need to upgrade in order to play it.

You can determine the version number of the game's design during editing from the Editor menu at Global->Design Version. During game play, the runtime engine displays the design name/version at the top/center of the main menu screen.
\page
\title Screen Resolution
\ident Screen_Resolution
\keys Screen Resolution
\browse General
\heading Screen Resolution

{\b\cf1 Screen Resolution}
Dungeon Craft supports three screen resolutions:
{\S3 }640x480 (default)
{\S3 }800x600
{\S3 }1024x768

The installer will always set the current screen resolution to 640x480. Even if you are currently running at a higher resolution, installing an update will return the settings to 640x480.

In order to use resolutions other than the default, you must download an additional utility called UAFConfig. This utility was written by Phalzyr to simplify switching between different resolutions. You can find a download link for UAFConfig on the {\uldb DC website}{\v !KLink(Contact)}.

Installing UAFConfig will give you a utility called UAFConfig, along with some default artwork that has been converted to the higher resolutions. An added feature is the ability to arrange the screen elements in the engine to your liking. Don't like where the small pic window is located on the screen? Then you can use UAFConfig to move it somewhere else.

Running the editor in higher resolutions will generally give you a larger map area. The editor can run higher than 1024x768, all the way up to 1280x1024. UAFConfig will handle letting you choose this editor mode.

The expected art dimensions for each mode are listed {\uldb here}{\v !KLink(Importing Art)}.

The engine determine which mode to run in by reading the config.txt file. 

The editor remembers the setting you choose using the operating system registry.

{\b Tech Notes:}

Those of you who wish to know what data is being stored by Dungeon Craft to remember the screen settings will appreciate the following. This is a copy of registry script that will set the proper screen setting. This script can be downloaded from the {\uldb DC website}{\v !KLink(Contact)}.

{\f3
REGEDIT4
;********************************************************************
;
; The ';' character indicates a comment line.
;
; This file can be used to adjust the screen resolution of the Dungeon
; Craft Editor. The default setting will be to use 640x480 mode.
;
; To force other resolutions, change the 'ScreenRes' value below to one
; of the following values:
;
; 0 = 640x480 
; 1 = 800x600
; 2 = 1024x768
; 3 = 1152x864
; 4 = 1280x1024
; 
;********************************************************************

[HKEY_LOCAL_MACHINE\SOFTWARE\UAFEditor]

; 640x480
"ScreenRes"=dword:00000000

; 800x600
;"ScreenRes"=dword:00000001

; 1024x768
;"ScreenRes"=dword:00000002

; 1152x864
;"ScreenRes"=dword:00000003

; 1280x1024
;"ScreenRes"=dword:00000004
}
\page
\title Encountering Problems
\ident Encountering_Problems
\keys Encountering Problems
\browse General
\heading Encountering Problems

{\b\cf1 Encountering Problems}
Problems are bound to happen eventually. This software is still in development and more time is spent writing code than testing code. Still, it is important to us that the editor and engine perform their duties without abnormal crashes or corruption of your design files.

Please don't hesitate to report a problem. It doesn't matter what sort of problem, whether a spelling mistake or engine crash. We want to know about it. Don't assume somebody else will report it.

When reporting a problem, please attach the error log to your message. There is a separate error log for the editor and engine. The contents of these files are destroyed and recreated each time you start the program. Also, please indicate which operating system you are using to play Dungeon Craft. The more information you give me, the more likely I am to find and solve the problem. So be generous with information describing what you were doing when the problem happened.

The editor's log file should always be in the '/UAF/UAFWinEd' folder, and it is called 'UAFErr_Edit.txt'. 

The engine's log file should usually be in the same folder as your design, and it is called 'UAFErr_Eng.txt'.

Send your problem reports to {\uldb CocoaSpud@hotmail.com}{\v !ExecFile(mailto:cocoaspud@hotmail.com)}.
\page
\title Coding Notes
\ident Coding_Notes
\keys Coding Notes
\browse General
\heading Coding Notes

{\b\cf1 Coding Notes}

Dungeon Craft source is released under terms of the Gnu Public License. A copy of the {\uldb GPL}{\v !KLink(Gnu Public License)} should be included with any delivery of source code.

Keep in mind that the source code is beta. Everything should compile on warning level 3 without errors or warnings. Try not to snicker while perusing the source code, most of it has been patched together over the years and doesn't always make sense. 

All code is C/C++, and is compiled using Microsoft Visual Studio 6, Enterprise Edition. It should also compile using MSVC version 5 as well as the newer .NET. The Learning Edition of MSVC will not compile the default release project settings of DC because it does not support static linking of the MFC library. It should compile the debug version of the project.

Dungeon Craft uses DirectX 7. In order to compile DC you must have the DirectX SDK installed. The SDK includes DirectX header and lib files. Any version of the SDK that is version 7 or higher is compatible with DC. Once the SDK is installed, make sure the search paths used by MSVC search the SDK folders ahead of the MSVC folders, or else the SDK files will not be used by the compiler.

You can download the source code in a self-installing archive. This archive is updated with each major release. DC uses some third-party libraries, which are included with the DC source as LIB files in the 'Shared' source folder. There are two precompiled versions of each LIB, debug and release. The DC project settings are already configured to include the proper LIB file based on which build you compile (release or debug). The source files used to create these libs is not included with the DC source archive, but the source can be downloaded from the DC website if needed. There should not be any need to download and compile them into LIB files.

The source code archive does not include any support files such as the default artwork or sound files. You must install DC (the program, not the source code) so that these files are available, otherwise the executables you build will not function properly. The executables require that several files be available and will shutdown immediately if these files cannot be located. Of course, if you are reading this you probably already have DC installed and can ignore this warning.

After the source is installed, there should be something like this:

UAF
 |-->src
     |-->cdx
     |-->GPDL
     |-->Shared
     |-->UAFWin
     |-->UAFWinEd

There is a project workspace in the src folder that will build everything called UAF.dsp. For the engine and editor there are four ways to build the executable: Win32 Release, Win32 Debug, Win32 Debug RT, and Win32 Debug PS. You cannot step through the source code using the Release build, so stick with one of the Debug builds. The RT and PS builds are personalized builds for RT (richard turner) and PS (paul stephens), with the main difference being that PS uses precompiled headers and RT does not. The PS build will be faster than RT after the first time. The plain Debug should also work fine but I don't recall what settings it uses.

CDX: The cdx folder contains source for the CDX version 3.1 DirectX wrapper. It compiles into a lib file that is statically linked into both UAFWin and UAFWinEd.

GPDL: The script engine is built separately from the other projects.

Shared: This folder contains source files that are shared between UAFWin and UAFWinEd

UAFWin: Source for the engine. The executable is called UAFWin.exe.

UAFWinEd: Source for the editor. The executable is called UAFWinEd.exe.

When compiling DC for the first time, compile the CDX project first since the engine and editor require the CDX lib file during link time.

Both the editor and the engine use DirectX 7 and require version 7 or higher DirectX Runtime/SDK files to be installed. The release build of the engine uses DirectX in exclusive mode, which means it will resize your video output to match the settings in config.txt. In this mode the engine basically takes over your display. Because this software is an early beta, there are certainly going to be problems, some of which might lock up the engine while it has control of your display. I have added processing to the engine which will exit and restore previous display settings immediately if the 'Esc' key is pressed at any time. If you build the engine in debug mode, the engine will run in a non-exclusive window that makes it possible to step through the source with the debugger while the engine runs in a 640x480 window located in the upper left of your screen. This window is not moveable or resizable.

To summarize:

- Install MSVC
- Install DirectX SDK
- Check MSVC search paths, put DX SDK folders first
- Load UAF.DSP file into MSVC
- Compile CDX, Win32 Debug
- Compile UAFWin, Win32 Debug
- Compile UAFWinEd, Win32 Debug

When running the engine in the debugger, edit the project settings and type in your test design into the the program arguments (use quotes). Then when you start the debugger the engine will automatically load your test design. For MSVC 6, go to Project->Settings->Debug and enter your design path in the 'Program arguments' box, as in 

"C:\Program Files\UAF\MyTestDesign.dsn"
\page
\title Distribute A Design
\ident Distribute_A_Design
\keys Distribute A Design
\browse General
\heading Distribute A Design

{\b\cf1 Distribute A Design}

Zip up the design folder, minus the 'Backup' subfolder if it's present. You won't need to include a copy of the engine (UAFWin.exe) since it is separately downloadable. Newer versions of the engine can play older designs.

In the manner of UA-style design distribution, there is usually a readme text file containing author contact info, general background about the design, etc.

There are three ways to make your design available to others that I know of. 

1. Make it available on your own website and announce it here, I'll then add a link to your site from the DC site to help others find it.

2. Upload it to Ziroc's archive on this site.

http://www.tgeweb.com/ironworks/dungeoncraft/gamedesigns.shtml

3. Upload it to the Magic Mirror. Mention that it is a DC design, since the MM stores DC and UA files.

http://frua.dns2go.com/

Here is an example template for a design ReadMe file:

---------------------------------------------------------------------

DESIGN NAME:                   Your Design Name
AUTHOR:                        Your Name
E-MAIL ADDRESSES:              Your Email Address
DESIGNS BY AUTHOR:             List other designs released by you
THANKS:                        Credit for playtesters, or other misc.
DOCUMENTATION:                 Files to read before playing design
DESCRIPTION:                   Describe your design
NOTIFICATION:                  If you don't have the UAFwin.exe, go here:
                               http:\\uaf.sourceforge.net
DISCLAIMER:                    A warning if design contains adult themes

---------------------------------------------------------------------

*INFO*

Genre:                     ForgottenRealms, Detective, etc
Suggested Party Size:      Or enforced party limits
Suggested Party Level:     Character level's needed to start playing
Starting Equipment:        
Pre-Made Party:            Mention which pre-gen char to use
Average Playtime:          How many minutes or hours

---------------------------------------------------------------------

*COPYRIGHT/PERMISSIONS*

 (change to suit your style)
 Art and such are free for using.
 Modifying the design in any way is not permitted.

---------------------------------------------------------------------
\page
\title General
\ident Engine_General
\keys General
\browse Engine_General
\heading General

{\b\cf1 General}

Each design can be played without the editor. You will need the engine executable to play a design, called UAFWin.exe. 

You can begin playing a design a few different ways. 

- You can copy UAFWin.exe into the design folder you want to play and double-click UAFWin.exe.

- You can just double-click UAFWin.exe from any folder and it will search your hard drive for all Dungeon Craft designs. A list of available designs will be presented and you can choose which one you want to play. Only one hard drive is searched, the one containing UAFWin.exe. The search process can be slow if your drive is large and has many subfolders.

- You can download the design launcher from the Dungeon Craft website. It will let you pick the UAFWin.exe and pick a design folder, then you simply push the 'Play' button and it will automatically start the engine with the proper command line values for playing the chosen design.

- You can create a shortcut to UAFWin.exe that includes command line options which indicate a design to play. Each time a design is saved >from within the editor a shortcut is automatically created and saved in the design folder. The shortcut is called 'Start'. You should copy this one and edit the shortcut properties to make it point to your chosen design.

If you download a design that contains a copy of UAFWin.exe you should probably use the included version rather than the latest version. Every effort is made to ensure new versions are compatible with older designs, but this is not always possible. 

When playing a design, the menu system is dynamic. For example, if your character isn't a magic user, you won't see magic related menu options such as 'Cast'.

Most everything you know about FRUA will apply when playing a Dungeon Craft design.
\page
\title Level Properties
\ident Level_Properties
\keys Level Properties
\browse Editor_Level Settings
\heading Level Properties
{\b\cf1 Level Properties}

Levels can be either dungeon (indoor) or wilderness (outdoor). You choose one of these two types when creating a new level. This type setting cannot be altered for an existing level. The only way to change an existing level to a different type is to delete it first.

Dungeon levels let you place walls and backdrops, while wilderness levels let you provide a background image upon which the party moves.


The Level Properties Dialog is accessed form the main Design Editor via the "Level" menu.  All the levels will be listed in a table.  Select the level that you want to modify and press the "Properties" button.  The "Level Properties" dialog box will appear.  This dialog allows you to change the name of the level, set the level's size, specify sounds and music to be assoicated with the level and several other things.

{\cf9 Supress Step Sound}
{\cf9 Supress Bump Sound}
Check these boxes to supress the sounds made when the party takes a step or bumps into a wall.  These are implemented for each level as "{\uldb Associated String List (ASL) entries}{\v !KLink(Associated String Lists)}" with the keys "Supress Step Sound" and "Supress Bump Sound".  Therefore, you can add or remove them during gameplay by using the 'LogicBlock' event and specifying either 'Set Level ASL' or 'Remove Level ASL' as one of the actions.  So, for example, if the party is in possession of "Soft Slippers" you might suppress the step sounds.



(we really need more help here)
\page
\title Config File
\ident Config_File
\keys Config File;Command Line, editor
\browse Editor_General
\heading Config File

{\b\cf1 Config File}

When the editor first starts it looks for a configuration file.  Usually this is a file named "config.txt" that is in the root install directory.  But the editor will load the config.txt file that is with a design when loading a design.

You may also specify the name of the configuration file on the UAFWinEd command line.  This is useful if, for example, you want the editor to reside in a "binary programs" directory and then be referenced by shortcuts in one or more UAF directories.  If a filename is specified on the command line it must reside in the "working" directory.  In the case of shortcuts, this can be specified as one of the shortcut's properties.

The interesting parts of the config file are:

{\f3 
// Root directory containing UAF installation.
Install_Dir  = I:\\MyUAF

// Path to default art/sound folder
Default_Resources = i:\\MyUAF\\DefaultArt

// Path to the game executable that will be copied
// to each design folder when design is saved
Game_Exec    = i:\\MyUAF\\UAFWin.exe
}

You can load and edit the default config file from within the editor using the menu option 'Database->Edit Config File'. If you make changes to the config file you should then use the 'Reload Config File' menu option to actually use the new settings.
\page
\title Editor General
\ident Editor_General
\keys Editor General
\browse Editor_General
\heading General Character of the UAF Editor

{\b\cf1 Editor_General}
The Dungeon Craft editor is meant to have many of the same editing features as the original DOS-based UA editor.  The dialogs that take place during the creation of game objects look very different however.

The 'front-page' of the editor consists of a very normal-looking Microsoft window with a menu-bar, an optional tool-bar, and an optional status-bar.

The rest of the window is devoted to the game elements themselves.  The major features are two-dimensional map of the current game level and a 3-D, first-person view of what the player will see.

The two-dimensional map shows the current position of the 'player' and, depending on the 'mode' selected, it will show either:
{\S3 }{\uldb the walls}{\v !KLink(Wall Editing Mode)}
{\S3 }the backdrops (ceiling and floor)
{\S3 }{\uldb the placement of events}{\v !KLink(Add Event)}
{\S3 }the zones assigned to each square
{\S3 }entry-point information
{\S3 }starting location.
\page
\title Saved Designs
\ident Saved_Designs
\keys Saved Designs
\browse Editor_General
\heading Saved Designs

{\b\cf1 Saved Designs}

When a design is saved, the editor will create a folder in the install location that has the same name as the design, with ".dsn" on the end of the name. If this folder already exists, the data within the folder will be over-written without warning. The editor does not automatically delete files from the design folder that are no longer needed. If you save the design, change to an art file with a different name, then save again, the old art file will still be in the design folder. To help the user keep track of what design files are required, two informational files are created in the design folder called ReqArt.txt and ReqSnd.txt. These files list each of the art/sound files that the design needs to run. They are not used by the engine to play the game and do not need to be included as part of a design delivery.

An alternative is to tell the editor to delete all files in the design folder before saving the design. This option is available under "Global->Clear Design Folder".

The editor does not check to see which wall and backdrop art slots are used by the current level. If an art slot is filled with art, it will get saved into the design folder. Clearing unneeded art slots will make the saved design smaller.

Once the design is saved it can be zipped and delivered to players. They do not need to have Dungeon Craft installed to play, only DirectX is required.
\page
\title Toolbar
\ident Toolbar
\keys Toolbar
\browse Editor_General
\alink ToolBar
\heading Toolbar

{\b\cf1 Toolbar}

A small window called the toolbar provides shortcuts to several of the menu items.

The tool bar can be shown or hidden by checking or unchecking the Toolbar item in the View menu.

The tool bar can be positioned where it is most convenient for you.  It can be moved independently of the main editor window or it can be docked at one of the four edges of the editor window.

To move the toolbar, click on an unused part of it...for example, the small space before the first button...and drag it to wherever seems most comfortable.  It you put it near one of the four edges, it will grab that edge and dock.  Otherwise, it will be completely independent.

The toolbar can be used to:

    Open a file  (The picture of a folder)
    Save the current design (The picture of a diskette)
    Select the {\uldb editing mode}{\v !KLink(Editing Modes)} (The blue buttons with letters)
\page
\title Testing Designs
\ident Testing_Designs
\keys Testing Designs
\browse Editor_General
\heading Testing Designs

{\b\cf1 Testing Designs}
You can test your design from within the editor. What actually happens is the editor launches the engine and tells it to play your design. The editor suspends itself until the engine exits.

You should save your design before testing it.

You can start testing your design by choosing the menu option Global->Test Saved Design. You can begin playing your design from the very beginning, which includes character creation and save game loading. You can also choose to play the design from your current position in the editor. In this case you will start the design at your current level and map coordinates. A test character will be provided to you called 'Super Spud'. 

When testing a design, quest variables possessed by the party will be displayed in the character inventory. They will not be displayed when the game is played outside of the editor.
\page
\title DicePlus
\ident DicePlus
\keys DicePlus
\browse Editor_General
\heading DicePlus

{\b\cf1 DicePlus}
Some values that you edit are called DICEPLUS fields. This means that they are text fields which let you specify the actual value in typical ADnD dice terms. 

Some valid examples:

{\f3
1d20
1d4 + 2
10
5 + level * 3
1d4 + 2 * level
3d6 + 2 * Elf
(dexterity == 18) * "Cleric/Fighter" * level
}

A DICEPLUS field is evaluated using the usual mathmatical operator precedence. A typical way to specify a value in ADnD is to state '1 die 4 plus 3 per level' which on paper is represented as '1d4 + 3/level'. In DICEPLUS format this would be '1d4+3*level'. The '/' is treated as mathematical division rather than a concept of 'per level'. In order of evaluation, this expression can be stated as

{\S3 } get current character level
{\S3 } multiply level by 3
{\S3 } roll 1d4
{\S3 } add the two results together

You can use parentheses to specify the order in which the terms are evaluated. (1d4+3)*level can be different than 1d4+(3*level).

A DICEPLUS field can contain keywords that are evaluated at runtime. For instance, '1d4+3*level' will evaluate 'level' to be a character's current level and then multiply that by 3. 

To specify a random dice roll, use the XdY syntax, where

xdy: x=num dice, 'd' is a keyword, y is num sides on each dice. 

Example: 1d4 for 1 die 4

These are the mathematical operators allowed in a DICEPLUS expression.

{\f3
'+' : addition
'-' : subtraction
'*' : multiplication
'/' : division
'==' : equality
'!=' : not equal
'>' : greater than
'>=' : greater than or equal to
'<' : greater than
'<=' : greater than or equal to
'&' : bitwise AND
'&&' : logical AND
'|' : bitwise OR
'||' : logical OR
'^' : bitwise exclusive OR
'^^' : logical exclusive OR
'%' : MOD
}

You can also use unary '-' and '+' to specify the sign of a number, such as '-1' for negative one.

There are several possible keyword types allowed in a DICEPLUS expression. They are evaluated at runtime in the context of the currently active character. You can use a race name, class name, skill name, or the literals 'level', 'class', 'race', 'male', and 'female'. These keywords are not case-sensitive. Some keywords have the '-' or '/' tokens in them, such as 'Half-Elf' and 'Cleric/Fighter'. In such situations you must enclose the keyword in quotes, as in '1d4 + "Half-Elf"'. If you do not, then the '-' and '/' tokens will be interpreted as the mathmatical operators subtraction and division. To be recognized as a token for which runtime substitution can be made, the race/class/skill keywords must match one of the defined values in your races.txt, baseclass.txt, or ability.txt files. 

If portions of the DICEPLUS expression cannot be understood, those portions will be ignored. An expression such as '10 + jerk * 11' will always be 10 because the 'jerk * 11' cannot be understood. 

You can limit the final result of a DICEPLUS expression by using '|<' to specify minimum, or '>|' to specify maximum. Example: '1d4+2 |< 2 >| 9'. That will limit the '1d4+2' to a minimum of 2 and maximum of 9. You can write the same expression as '2 |< 1d4+2 >| 9'. The default limit is -999 to 999, and this default is not normally displayed. If you enter a different limit from the default it will always be displayed in a DICEPLUS expression.
\page
\title Keyboard Shortcuts
\ident Keyboard_Shortcuts
\keys Keyboard Shortcuts
\browse Editor_General
\heading Keyboard Shortcuts
{\b\cf1 Keyboard Shortcuts}

In most cases, keyboard shortcuts are displayed next to the menu option they equate to. For convenience, below is a list of the currently supported shortcuts. 

CTRL = Control Key
ALT  = Alt Key

{\S3} CTRL+A : Display map access
{\S3} CTRL+B : Display background slots
{\S3} ALT+B  : Toggle, place walls on both sides of square segment
{\S3} CTRL+E : Display events
{\S3} CTRL+G : Display global configuration
{\S3} CTRL+I : Display items
{\S3} CTRL+L : Display level list
{\S3} CTRL+M : Display monsters
{\S3} CTRL+N : Display NPC list
{\S3} CTRL+S : Display spells
{\S3} CTRL+T : Launch runtime engine to Test design
{\S3} CTRL+W : Display wall slots
{\S3} ALT+W  : Toggle, allow cursor to pass through walls
{\S3} CTRL+Z : Undo last map operation (max undo configured in config.txt file)

In wall placement mode only:

{\S3} F : place front wall
{\S3} L : place left wall
{\S3} R : place right wall
{\S3} H : limits wall placement to horizontal only when using the mouse
{\S3} V : limits wall placement to vertical only when using the mouse
{\S3} Press right-mouse button and drag to erase walls under mouse cursor

In any mode, holding down the CTRL key while left-clicking the map will move the arrow position to the map square you click.
\page
\title Design Editing Modes
\ident Editing_Modes
\keys Editing Modes
\browse Editor_Editing Modes
\heading Design Editing Modes

There are 6 editing modes available in the editor. Each mode determines what type of object can be added to the current design. Some menu options are enabled only for specific modes. If an editor menu option is disabled, then it is probably because you cannot use that option in the current editing mode. The editing mode is selected from the "Mode" menu or, if the {\uldb toolbar}{\v !KLink(ToolBar)} is enabled then by clicking on the appropriate blue button:

{\cf9 Wall Mode:  The toolbar{\f3} "W" {\f7} }

Wall mode allows you to select and place the walls of your dungeon or town.  At the same time, you declare whether or not the wall is blocked to player passage and what kind of key, spell, etc is necessary to admit passage.

{\cf9 Backdrop Mode:  The toolbar{\f3  "B" } }
Backdrop mode allows you to select and place the walls of your dungeon or town.

{\cf9 Event Mode:  The toolbar{\f3  "E"} }
When in event mode, events are placed by clicking in a square.

{\cf9 Zone Mode:  The Toolbar{\f3  "Z"} }
Entry Point Mode is used to place the 8 entry points for the current level.

{\cf9 Starting Point Mode:  The Toolbar {\f3 "S"} }
There is only one starting point for the entire design. The starting point is where a new party will be placed when they begin adventuring.
\page
\title UnDo
\ident UnDo
\keys UnDo
\browse Editor_Editing Modes
\alink UnDo
\heading UnDo

{\b\cf1 UnDo}

The operations you perform while editing are recorded in a last-in-first-out queue; a stack. You can cancel, or undo, the last operation by selecting 'UnDo' from the 'Level' menu or by using the Control-Z key on your keyboard.

Several operations are recorded. You can undo multiple operations by successively pressing Control-Z. Once an operation is 'undone' it is forgotten and there is no way to 're-do' it except to do it again.
\page
\title Global Game Configuration
\ident Global_Game_Configuration
\keys Global Game Configuration
\browse Editor_Global Settings
\heading Global Game Configuration
{\b\cf1 Global Game Configuration}

Global settings are generally those that have effect during the entire game, regardless of which level is currently being played. To begin editing the global settings, use menu option 'Global->Global Settings' or just CTRL-G.

A screen shot of the global settings window is below:
\{bmc images\\GlobalSettings.bmp\} 

{\b Design Name} The current name for your design. This name does not need to match the saved folder name you store the design files in.

{\b Starting Exp} This experience is given to all new characters created by created by player.

{\b Starting Platinum/Gem/Jewelry} These funds will be given to all new characters created by the player.

{\b Starting Location}{\b } This determines where the player begins a new game. You can select the starting level, the xy coord, and initial party facing. Only levels which have been created and saved will be displayed in the starting level list. You can also set the initial game clock time (24 hour format, 0000-2359).

{\b Time Delta Per Party Step} These four settings determine how much game clock time elapses for each party step.
{\S3} Dungeon - dungeon maps, not searching
{\S3} Dungeon Search - dungeon maps, search mode enabled
{\S3} Wilderness - wilderness maps, not searching
{\S3} Wilderness Search - wilderness maps, search mode enabled

{\b Min Party Size} The minimum number of party members needed before a player is allowed to begin adventuring.

{\b Max Party Size} The maximum number of party members allowed before a player is allowed to begin adventuring.

{\b Allow Char Create} If checked, the player can create new characters. If not checked, the player cannot create new characters and must use whatever pre-generated characters the designer has made available.

{\b Various Border/Frame Buttons} You can use these buttons to customize the artwork used during game play.

{\b Font} You can choose which Window's font will be used during game play. You should use a common font. If the specified font is not installed on the computer where your design is played, the closest matching font will be used. The font size can also be chosen. The minimum font size is 8pts, but no maximum is enforced. The game screens will not adapt to fonts which cannot fit in the allotted space. Text which will not fit will either run on into the next screen area, or be truncated. You should test your design with some long character/item/monster names if you select a large font size.

{\b Icon Background} This image is only used during new character creation, and is the backdrop against which possible combat icons are displayed.

{\b Title Screen} This image is displayed when the game starts. It will continue to be displayed until the player presses a key. If no image is specified, then the starting menu will be the first thing displayed.

{\b Screen Background} The default background is entirely filled with the color black, and no background image is specified. You can choose a background image that will be the background for all non-combat screens. This image is drawn first, and all other art is drawn on top of the background image.

{\b Starting Equipment} This lets you choose which items will be given to all new characters created by the player.

{\b Sounds} To edit the default global sounds played during the game.

{\b Currency} To edit the names and conversion rates of up to 10 currency types. By default, the FRUA money types are used.

{\b Difficulty Settings} To edit the five game difficulty settings. You can change each difficulty level name, as well as what affect it will have on game play.

{\b Global Attributes} This is a means of enabling the behavior of older versions of Dungeon Craft. This will display the currently available game play options, and the version at which each will behave as. By default, all available options will behave as the most current Dungeon Craft version. You can selectively alter a specific option to behave as if the game were running at an older version if you wish.

{\b Auto Darken Viewport} This is way of simulating nightfall or darkness. If enabled, it will automatically darken the viewport during the specified times. The Auto Darken Amount ranges from 0-256, with 0 being completely dark. When playing the game, the game clock is used to determine when the viewport should be darkened. While editing the design, the Auto Darken Start/End time is compared to the global starting time. For instance, if your Auto Darken times range from 18:00-5:00 (6pm-5am), then you can set the global start time to any value in that range, say 18:01, and the viewport will be darkened using your settings. While in the editor, there is no game clock so the viewport will stay darkened until you reset the global start time to a value outside the range of the Auto Darken times.
\page
\title Deleting a Wall
\ident Deleting_a_Wall
\keys Deleting a Wall
\browse Editor_Walls
\alink DeleteWall
\heading Deleting a Wall

{\b\cf1 Deleting a Wall}

Deleting a wall means to delete the wall itself and also to set the blockage state to 'Open' or 'no blockage'.

Deleting a wall is accomplished in several ways.  See:

{\S3 }{\uldb Place Walls Using 2-d map}{\v !ALink(PlaceWallsOn2d)}
{\S3 }{\uldb Placing Wall using 3-d View}{\v !ALink(PlaceWallsOn3d)}

for details.

A wall may also be deleted by using the editor's '{\uldb UnDo}{\v !ALink(UnDo)}' feature
\page
\title KwikKlik
\ident KwikKlik
\keys KwikKlik
\browse Editor_Walls
\heading KwikKlik

{\b\cf1 KwikKlik}

KwikKlik mode is enabled by checking the item labeled 'Kwik KliK Placement' in the 'Mode' menu.

This mode is intended to make it easier to maneuver and to manipulate walls using only the mouse.

See {\uldb Wall Editing}{\v !ALink(WallEditing)} and {\uldb Placing Wall using 3-d}{\v !ALink(PlaceWallsOn3d)} view for particulars.
\page
\title 3-D Wall Editing
\ident Wall_Editing
\keys 3-D Wall Editing;Wall Editing Controls
\browse Editor_Walls
\alink WallEditing
\heading 3-D Wall Editing

{\b\cf1 Wall Editing}

{\cf9 Using 3-D view to place walls---}
You need to know that a wall is really quite 'one-sided'.  When you place a wall in your game it will only be seen from one side!  If you go to the other side and look back you will see nothing.  If you would like the editor to plant two walls (one on each side) there is an option in the 'Mode' menu to accomplish this.

The 3-D view shows the walls from a player's perspective and the two-dimensional map shows the walls from a bird's-eye view.

You can {\uldb place walls}{\v !KLink(Place Walls)} using either the {\uldb 3-D view}{\v !KLink(3-D wall editing)} or the two-dimensional map.

The two-dimensional map shows several characteristics of a wall.
{\S3 }It shows both sides of the wall.  If a wall has only one side then the wall will appear thinner and appear in one square but not the adjacent square.
{\S3 }It shows whether the 'wall' is to be considered a wall or a door.  Walls have solid lines and the lines for doors have a gap in the middle.
{\S3 }The color of the line gives a hint as to which wall has been placed there. If you are careful to use contrasting colors then this can be very helpful.
{\S3 }It shows whether a player can walk through the 'wall'.  This is shown by a small additional thickness in the middle of the wall if passage is blocked.
\page
\title Select Wall Slot
\ident Select_Wall_Slot
\keys Select Wall Slot
\browse Editor_Walls
\alink SelectWall
\heading Select Wall Slot

{\b\cf1 Select Wall Slot}

You must be in Wall placement mode before you can select or edit a wall slot.

Below the 3-D view there is a button labeled "Select Wall Slot" and below this button is the image and information about the currently selected wall.

Above the wall's image is its slot number.  To the left of the image is a small square showing the color of the wall as seen in the two-dimensional map.

Below the wall image is a small message that identifies the wall as 'blocked', or 'open', or any other selected blockage mode. The blockage setting indicates whether the party will be able to pass through the wall during game play.

When you choose 'Select Wall Slot' you will see this window:

\{bmc images\\WallSelect.bmp\} 

There are 48 wall slots, of which 47 can be edited by you. Slot 0 will always be empty. The wall slots are displayed in groups of 16, and you can advance to each group using the tabs along the top.


All wall editing functions operate on the currently highlighted wall slot. The highlighted slot is indicated by the white bounding box surrounding the wall image. The current slot in use will be the default highlighted slot when you open this window.

Each slot has a square color below it. This color corresponds to the color displayed on the map when you place the wall slot. Each group of 16 slots defaults to the same 16 colors, ie. slot 2 color is the same as slot 18 color. You can customize these colors using the UAFConfig utility, downloadable as a separate utility from the {\uldb DC website}{\v !KLink(Contact)}.

Dungeon Craft supports customized wall image formats. Each format can arrange the wall sections in it's own way. The format is defined in the config.txt file, and up to 16 formats can be active. Each format can be displayed with all other formats. The default format is always supported. Each format has a number associated with it. The format number for the current wall slot is displayed in the lower left of the wall slot window.
\page
\title Replacing a Wall
\ident Replacing_a_Wall
\keys Replacing a Wall
\browse Editor_Walls
\alink ReplaceWall
\heading Replacing a Wall

{\b\cf1 Replacing a Wall}

Need some words here about placing a wall and how it replaces what was there including blockage.
\page
\title Place Walls
\ident Place_Walls
\keys Place Walls
\browse Editor_Walls
\alink Place Walls
\heading Place Walls

{\b\cf1 Place Walls}

Placing a wall means both putting a visible wall on the side of a square and setting the 'blockage' state.  These are two independent attributes of one of the square's sides.

When you {\uldb select a wall to be placed}{\v !ALink(SelectWall)} you also make a decision about whether the wall is 'open', 'locked', etc.  It is perfectly reasonable, for example, to have one side of a room blocked without any visible wall.  More common is a wall with a doorway that is 'open' or unblocked.

There are basically two ways of placing walls in your design:

{\S3 }{\uldb Place walls using 3-d view.}{\v !ALink(PlaceWallsOn3d)}
{\S3 }{\uldb Place walls using the 2-d map}{\v !ALink(PlaceWallsOn2d)}

You need not decide on one method and use it exclusively.  Both methods are active and can be used at the same time.

If you make a mistake (or even mistakes) when placing a wall there are three methods of correcting your mistake:

{\S3 }{\uldb Delete the wall}{\v !ALink(DeleteWall)} just placed.
{\S3 }Use the editor's '{\uldb UnDo}{\v !ALink(UnDo)}' capability
{\S3 }{\uldb Replace the wall}{\v !ALink(ReplaceWall)} with the correct wall.

Again, all these methods are usable at the same time.  Only habit will decide which is most convenient for you in any situation.

You might be interested in knowing that you can also manipulate the placement of walls and the blockage state of walls at runtime.  See {\uldb Level Associated String List}{\v !ALink(Level Associated String List)}
\page
\title Place Walls Using 2-d map
\ident Place_Walls_Using_2-d_map
\keys Place Walls Using 2-d map
\browse Editor_Walls
\alink PlaceWallsOn2d
\heading Place Walls Using 2-d map

{\b\cf1 Place Walls Using 2-d map}

There are two basic ways of placing walls in your design using the 2-d map.

In the first method, you use the left mouse button to place a wall in a given square.  Which of the four walls is determined by your orientation in the 3-d view which is also reflected by the orientation of the small, white arrow in the 2-d map.

So, if the arrow is pointing south and you click in square 5,9 then the wall is inserted on the south side of square 5,9.

If '{\uldb KwikKlik}{\v !KLink(KwikKlik)}'  is enabled then the orientation of the arrow is ignored.  You place a wall by left-clicking on the four sides of the square.  The square is divided into four triangles by two diagonal lines and the position of the resulting wall is determined by which of those four triangles the mouse is pointing to.

In KwikKlik mode, you can also place walls by holding down the left mouse button and dragging the mouse cursor where you want walls to be placed. If you hold down the 'H' key while dragging the cursor you will place only horizontal walls. If you hold down the 'V' key while dragging the cursor you will place only vertical walls.

As always, placing a wall can mean either placing a single wall on one side of one room or it can mean placing two identical walls back-to-back.  The choice is made by 'checking' or 'un-checking' the 'Place Wall on both Sides' option in the 'Mode' menu.

In both methods, the right mouse button may be used to {\uldb delete a wall}{\v !ALink(DeleteWall)}.
\page
\title Moving Around Using Mouse
\ident Moving_Around_Using_Mouse
\keys Moving Around Using Mouse
\browse Editor_Walls
\alink MouseMove
\heading Moving Around Using Mouse

{\b\cf1 Moving Around Using Mouse}

You can jump to any square in your 2-d map by holding down the 'Control' key and clicking the mouse in that cell.

If you have '{\uldb KwikKlik}{\v !KLink(KwikKlik)}' enabled, you can use the mouse to move around the design.

The 3-d window is divided into 3 equal horizontal stripes; a top, a center, and a bottom stripe.  These stripes are not marked in any way but with a bit of practice you can locate them easily.  The center slice is used to place and delete walls.

You can move around your level by clicking the mouse in the top or bottom stripe, as follow:

{\cf9 To turn left.}  Left-click the left one-third of the top stripe.
{\cf9 To turn right.}  Left-click the right one-third of the top stripe.
{\cf9 To turn around 180 degrees. } Left-click the center of the bottom stripe.
{\cf9 To move forward without turning.}  Right-click the center of the top stripe.
{\cf9 To move backward without turning.}  Right-click the center of the bottom stripe.
{\cf9 To move left without turning.}  Right-click the left one-third of the top stripe.
{\cf9 To move right without turning.}  Right-click the right one-third of the top stripe.

So the rule is simple.  Left-click to turn and right-click to move.

Note that you cannot move through blocked walls unless you enable 'Move Through Walls' in the 'Mode' menu.

See {\uldb Moving Around Using Arrows}{\v !ALink(ArrowMove)}
\page
\title Moving Around Using Arrow Keys
\ident Moving_Around_Using_Arrow_Keys
\keys Moving Around Using Arrow Keys
\browse Editor_Walls
\alink ArrowMove
\heading Moving Around Using Arrow Keys

{\b\cf1 Moving Around Using Arrow Keys}

The 'up' arrow key moves you forward one square.
The 'left' arrow key turns you left 90 degrees.
The 'right' arrow key turns you right 90 degrees.
The 'down' arrow key turns you left or right 180 degrees.  You decide.

'Forward' means the direction you are facing.

Your current position and the direction you are facing in the level is indicated on the 2-d map by a small white arrow in one of the squares.

See: {\uldb Moving Around Using Mouse}{\v !ALink(MouseMove)}
\page
\title Placing Walls using 3-d view
\ident Place_Walls_on_3-d_View
\keys Placing Walls;KwikKlik
\browse Editor_Walls
\alink PlaceWallsOn3d
\heading Placing Walls using 3-d view

{\b\cf1 Placing Wall using 3-d View}

In this method of placing walls, you 'walk' around the design as if you were playing the game and put walls to your left, right, and front.  There are two ways to move around using the 3-d View:

{\S3 }{\uldb The arrow keys}{\v !ALink(ArrowMove3d)}.
{\S3 }{\uldb The mouse}{\v !ALink(MouseMove3d)}.

There are several ways of placing a wall in the 3-d view:

{\S3 }Left-click the appropriate button just below the view.
{\S3 }Press the appropriate letter on your keyboard.
{\S3 }Left-click the space in the 3-d view.

The three buttons below the 3-d view are labeled 'Left', 'Place Wall', and 'Right'.  The first letter of each of these commands can be used to place the walls from the keyboard.  The walls are placed in the space you are currently 'occupying', to your left, front, and right, respectively.

If you have '{\uldb KwikKlik}{\v !KLink(KwikKlik)}' enabled then you can also place walls using the mouse in the 3-d view.  The view is divided into 3 equal horizontal stripes and the center stripe is made up of 5 equal squares.  The 5 squares from left to right represent:
{\S3 }Left wall of room you are in
{\S3 }Left wall of room just ahead
{\S3 }Front wall of room you are in
{\S3 }Right wall of room just ahead
{\S3 }Right wall of room you are in
You place a wall by left-clicking the appropriate square and {\uldb delete a wall}{\v !ALink(DeleteWall)} by right-clicking.  All much easier done than said.

No matter what method you use, placing a wall can mean either placing a single wall on one side of one room or it can mean placing two identical walls back-to-back.  The choice is made by 'checking' or 'un-checking' the 'Place Wall on both Sides' option in the 'Mode' menu.
\page
\title Show Access
\ident Show_Access
\keys Show Access;Access
\browse Editor_Walls
\alink Access
\heading Show Access

{\b\cf1 Show Access}

The 'Level' menu has a 'Show Access' option that can be toggled on or off.  When it is on, the wall-editing mode colors the squares to indicate whether or not they can be reached from the current position with spells, keys, etc.

Each level has its own individual rules for deciding whether a square can be reached from an adjacent square.  The default is generally:

{\S3 }Red - Access marked 'Locked'.

{\S3 }Green - Access marked 'Spell to Open'.

{\S3 }Blue - Access marked 'Locked Key n'.

The colors are additive so that an area that would be both red and green will be colored yellow.

The criteria for each of the three access rules can be modified to suit your particular needs by using the 'Access Options...' item in the 'Level' menu.  Your criteria will be saved with the level currently being edited and you can specify different criteria for each level.
\page
\title Event Viewer
\ident Event_Viewer
\keys Event Viewer
\browse Editor_Events
\heading Event Viewer

{\b\cf1 Event Viewer}

The Event Viewer dialog shows *all* events for the current map, not just the events at the place on the map you selected. The events are differentiated by the map locations that appear in the event labels. Something like "Camp: 1,1" indicates a camp event at map location 1,1. The map coordinates are zero based, so a 50x50 map has coords from 0-49 in both directions. When you select an empty map location and the event viewer pops up, there will be all previously created events and a new event node that reads "No Event: x,y", and the x,y will match the square that was clicked by the mouse cursor.


{\b Example from Tutorial:}

\{bmc images\\eventViewer.bmp\}
\page
\title Add Event
\ident Add_Event
\keys Add Event
\browse Editor_Events
\heading Add Event

{\b\cf1 Add Event}

In the editor, with the editor in event mode, click on a map square and the Event Viewer pops up. Use the mouse to select an unused node labeled "No Event", or for a chained event the label will have something like "Normal Chain: No Event". The chained event text differs depending on the root event, but an empty event node will always have "No Event" somewhere in it. Now that an empty node is selected and highlighted, choose one the event types on the right and click on the "Add" button. Fill in the requested event data in the event dialog that pops up and click on the "Ok" button. The event label text should now reflect the event type and the map location, something like "Camp: 1,1". The new event will have "+" symbol next to it to indicate it has chainable event nodes. After clicking on the "+", the event tree will expand that event node to show all available chain events for this type of root event.

Adding a chained event is the same process, just start with selecting an empty chained event node.
\page
\title Event Text
\ident Event_Text
\keys Event Text
\browse Editor_Events
\heading Event Text

{\b\cf1 Event Text}
Most events allow you to enter some text that will be displayed to the player. Do not attempt to format your text using tabs (\t). The text will be automatically formatted to fit the screen during game play, and such embedded formatting will be stripped out. You can force a linefeed by pressing CTRL+ENTER in any multi-line capable edit box.

You can enter up to 2 billion characters for each event. The event text is displayed in the text box by the engine. If your text will not fit into a single box the engine will automatically provide page up/down options to the player, allowing the player to scroll through the text.

You can embed some tags in your event text to govern how the engine formats your text at runtime.

Color tags toggle to a new font color. The new font color will be used until another color tag is encountered. Each time that event text is initially displayed, the default color (white) is used. The color tags from the current event text will not affect text displayed by future events.

White Text:  /w
Red Text:    /r
Yellow Text: /y
Green Text:  /g
Blue Text:   /b
Custom Color: /c 
(set custom color in config.txt file, COLOR_CUSTOM_1 = 255,255,255)

You can also toggle highlighted text using the /h tag. Highlighted text is always displayed as a black font on a white background regardless of the current color settings.

You can make the engine insert party names into the event text automatically using these tags:

^         = active party member name
^1 to ^8  = name of party member 1..8

The active party member is the one whose name is currently highlighted in the party list window.

You can also make the engine insert the current game day, hour, or minute into the event text automatically using these tags:

^D  =  current game day
^H  =  current game hour
^M  =  current game minute

The game clock advances with each party step, during combat, resting, or by using an event which can alter the game clock.

The temporary attributes added by the LogicBlock event can be referenced and their values substituted into the event text. For instance, supposing you use the LogicBlock to add a temporary attribute named 'a' with a value of '300'. To display this value in an event, simply construct your event text like this:

'The party has ^a gold'

and the engine will perform a lookup of 'a' in the temporary attribute list and substitute '300', like this

'The party has 300 gold'

You can use LogicBlock to add temporary attributes named 'a' through 'z', and then reference one or more of them in the event text as ^a through ^z. In order to distinguish them from other types of substitution, such as ^D for game day, keep these letters lower case. In other words, ^D means insert the current game day, while ^d means lookup the temporary attribute named 'd'.

More Examples:

1. "The party looks at ^ and growls"
2. "The party looks at ^6 and growls"
3. "The party looks at /rRolf/r and growls"
4. "The party looks at /rRolf and growls"

1. The '^' will be replaced by the active party member's name.

2. The '^6' will be replaced by the 6th party member, if there is one, else the last party member's name will be used.

3. The text 'Rolf' will be displayed in red, the rest will be white.

4. The text 'Rolf and growls' will be displayed in red, the rest will be white. The next event that displays text will still default to white.
\page
\title Logic Block Overview
\ident Logic_Block_Overview
\keys Logic Block Event;Logic Block Editing
\browse Editor_Events_Logic Block Event
\alink Logic Block Event
\heading Logic Block Event

{\b\cf1 Logic Block Event}

The Logic Block Event is a bit complicated and may take some getting used to.  It allows rather complex conditional tests and provides a method of performing miscellaneous actions or tasks that are not available in the standard events.

The event dialog consists of seven parts:

{\S3 }Five input blocks.  What to test.
{\S3 }Seven Logic Gates.  What questions to ask.
{\S3 }Six Not Gates.
{\S3 }Twelve Named values.
{\S3 }Two Actions.  What to do, based on answer.
{\S3 }Chain control.
{\S3 }Runtime Debugging control.
{\S3 }Record Values at Runtime control.


{\cf9 Input blocks.....}

Each of the five input blocks can be configured independently to extract information from the current state of the game or to provide a constant literal value to be compared with other inputs.  Each input has a text field that can be used to provide further information about what data you want.

For example, you might wish to know if there are at least three members in the current party.  You could configure input-B as "Party Size", configure input-A as "Literal" with the number 2 in its text field, and configure Gate-C as "Arithmetic Greater".  The output of Gate-C would be true if the party size was three or more.

{\cf9 Logic Gates}

Each of the Logic Gates is identical.  Each is a two-input device that can be configured to produce outputs that depends on one or both of the inputs.  The output can be a logic value (True or false), a number, or a string of characters. In actuality, the output is always a string of characters.  Truth is represented by "1", false is represented by "", and numbers are represented by decimal digits.

For example, you might wish to know if a global attribute named "Diploma" has the value "Giddeon".  You could do this by fetching the global attribute using input-B, providing the literal "Giddeon" from input-A, and configuring Gate-C with the function "String Equal".  The output of Gate-C would then be either "1" or "" depending on whether the global attribute was or was not exactly "Giddeon".

The gates have an input from the top and an input from the side.  When the operation is not commutative (such as "Arithmetic minus") then the top input is considered the "left" operand and the side input is considered "right".  For example, the Gate labeled 'K' has an input on the top from Gate-J and an input from the side (its left side) form the 'raw' input labeled 'G'.
If this gate specified 'Arithmetic Minus' then the result would be Gate-J minus Input-G.

{\cf9 Not Gates}

Six of the Logic Gates have outputs that pass through "Not" gates.  Enabling a Not Gate causes the truth value to be toggled between true and false.  Any non-blank value is considered true and is turned into a blank (or empty) string and any empty string is considered false and turned into the string consisting of the single digit "1".  When not enabled, the Not Gates have no effect whatsoever.

{\cf9 Named Values}

The lines emanating from the five inputs and from the seven logic gates represent values that you can reference in the parameter text of other inputs and actions.  This is done in the text fields using the ampersand character.  For example, let us say you want to set a global attribute to be the name of a party member so that you can talk about him later when he is no longer a part of the party.  You could configure input-A to "Character Name".  Then you might configure the first action field to "Set Global Attribute".  The parameter text of the Action field might be "Member=&A".  This would mean that the global attribute named "Member" would have the value of the line leaving the input labeled "A"; in this case the character's name.  You should note that enabling the 'Not' gate on a line does not modify the Named Value associated with that line. 

The values associated with the twelve lines are computed on alphabetical order.  So, for example, it would not make sense to reference Line-E in the parameter text of Input-A.  If you did, it would be the empty string.

{\cf9 Actions}

There are two actions that can be performed as a result of this event.  Each can be configured to occur unconditionally or only if the result of the computation of Gate-L is true or false.  The text field of the parameters can reference named values.  See the paragraph describing "Named Values".

{\cf9 Chain Control}

Chaining can be totally disabled, set to "normal Chain", or can be configured to chain based on the result of the computation of Gate-L.

"Normal Chain" means to use the settings from the Event Viewer to determine whether or not chaining occurs.  For example, chain if event happens.

"Chain if True" and "Chain if False" provide a way to go in two different directions depending on the results of the computation.  For example, you might want to chain to a combat event if there are fewer than three characters in the party or to a text event otherwise.  You should set "Conditional Chain", "Chain if True", and "Chain if False".  Then in the event viewer you should add chained events to the "True" and "False" branches of the "Logic Block" event.

{\cf9 Runtime Debugging Control}

Turning on Runtime Debugging will cause the results of each Input and Gate to be written to the log file.  This can be very handy if things do not seem to be working as designed.  There are many ways to make mistakes.

{\cf9 Record Values at Runtime}

Enabling this control causes all the values labeled "A" through "L" to be recorded for later use in GPDL scripts.  The recording takes place after all the values have been computed but before any actions are processed.  This means that GPDL scripts in the input blocks that reference these recorded values will get the values from the previous LOGIC_BLOCK event that recorded the values and GPDL scripts in the action blocks will get the values from the current LOGIC_BLOCK (if recording is enabled).

The GPDL function '$LOGIC_BLOCK_VALUE' can be used to retrieve these values.

{\cf9 Control Flow}

This diagram shows how the flow of control works it's way through the LogicBlock event, and how inputs and gates are combined into a final result.

Inputs: A, B, D, F, G
Gates: C, E, H, I, J, K, L

   // gather inputs
   w0 = inputA
   w1 = inputB   
   w3 = inputD
   w5 = inputF
   w6 = inputG

   //
   // perform left side computations
   //
   w2 = gateC(w0,w1)
   w12 = not(w2)   

   w4 = gateE(w3,w12)
   w13 = not(w4)     
      
   w8 = gateI(w6,w13)
   w15 = not(w8)

   //
   // perform right side computations
   //
   w7 = gateH(w5,w0)
   w14 = not(w7)
   
   w9 = gateJ(w3,w14)
   w16 = not(w9)
   
   w10 = gateK(w6,w16)
   w17 = not(w10)

   //
   // combine left and right sides using Gate L
   //
   w11 = gateL(w15,w17)


	w1			w5
	|			|
	w2<------ w0 ---------->w7
	|			|
	w12			w14
	|			|
	w4<------ w3 ---------->w9
	|			|
	w13			w16
	|			|
	w8<------ w6 ---------->w10
	|			|
	w15			w17
	|			|
	|			|
	|-------->w11<----------|
		   |
	   Action1---Action2  // take action(s) based on result of w11

{\uldb Other Logic Block Topics}{\v !KLink(Logic Block Editing)}
\page
\title Logic Block Values
\ident Logic_Block_Values
\keys Logic Block Values;Logic Block Editing
\browse Editor_Events_Logic Block Event
\alink LogicBlockValues
\heading Logic Block Values

{\b\cf1 Logic Block Values}

All values from the Inputs, the Logic Gates, and the Not Gates consist of character strings (text).

Logical values are expected by some Gate functions.  Some Gate functions produce logical values and the Not Gates produce logical values.  Logical values are either "true" or "false".  True is represented by the string consisting of the single digit '1'.  False is represented by the empty string, a string consisting of zero characters.  When a logical value is needed then any string of one or more characters is considered "true" and only the empty string is considered "false".  For example, the strings "Michael", "false", "true", "0", or "==" will all be considered "true".

Numeric values are produced by some inputs and by some Gate functions.  When a numeric value is generated it will be the decimal value of the number with no leading zeroes except that zero itself is represented by "0".  Negative numbers will have a leading minus sign.  When a numeric value is expected things get a bit more complicated.  How should "23x" be interpreted?  How about "x23"?  Or "234567898765432345678".  The rule is this:  non-decimal digit characters are ignored and arithmetic is done on the characters, not the binary representation of the number.  This means that you can have numbers as large as you please and you can intersperse non-decimal characters if it pleases you to do so.  Here are some examples:

{\S3 }"23"  means 23
{\S3 }"X23"  means 23
{\S3 }""  means zero  (empty string)
{\S3 }"Michael" means zero  (like empty string)
{\S3 }"--23"  means -23  (extra minus ignored)
{\S3 }"Mi-cha2el3"  means -23
{\S3 }"2-3"  means 23  (minus after first digit ignored)

{\uldb Other Logic Block Topics}{\v !KLink(Logic Block Editing)}
\page
\title Extending Logic Block
\ident Extending_Logic_Block
\keys Extending Logic Block;Logic Block Editing
\browse Editor_Events_Logic Block Event
\heading Extending Logic Block

{\b\cf1 Extending Logic Block}

Very complicated functions will require more than one Logic Block Event to calculate.

Let us say that you want to know if party leader has a strength greater than 13, is older than 22 years, is a fighter or a thief, and is carrying a Axe of Beheading.

In general, you can carry out two "AND" operations in each Logic Block Event.  So the strategy is to compute the result in pieces, setting a temporary attribute that can be tested in a later Logic Event.  Here is how it might be done:

First Event --
Input-B set to Ability Score ("0,Strength").  Input-A set to Literal ("13").  Gate-C set to Arithmetic greater.
Input-F set to Age ("0").  Input-D set to Literal ("22").  Gate-J set to Arithmetic Greater.
Gate-L set to Logical And.
This gets the strength and age of character 0 and compares them with the constants 13 and 22.
First Action (Always) Set Temporary Attribute ("Strength/Age OK=&L")
This sets the attribute "Strength/Age OK" to "1" if both the strength AND the age criteria are met.

Chain (Normal Chain) to another Logic Block

Second Event --
Input-A set to Character Class ("0").  Input-B set to Literal("Thief").  Input-F set to Literal("Fighter").  Gate-E and Gate-J both set to String Equal.  Gate-L set to Logical OR.
This will provide a true output from Gate-L if the character 0 is either a Fighter or a Thief.
First Action (Always) Set Temporary Attribute ("Class OK=&L").
This sets the attribute "Class OK" to a 1 if the character is the proper class.

Chain (Normal Chain) to another Logic Block

Third Event --
Input-A set to Temporary Attribute ("Class OK").
Input-B set to Temporary Attribute ("Strength/Age OK").
Gate-C set to Logical AND.
Input-F set to Item List("0") to get items held by character zero.
Input-D set to Literal("/Axe of Beheading/").
Gate-J set to GREP.  This asks if the Axe is in the list.
Gate-L set to Logical AND.

This final result will be true if the character is a fighter or thief, is over 22 years of age, has a strength greater than 13, and is carrying the Axe of Beheading.

"AND" operations can also be done by chaining only if results are true.  "OR" operations are probably more easily done with the temporary attribute method.

{\uldb Other Logic Block Topics}{\v !KLink(Logic Block Editing)}
\page
\title Logic Block Gates
\ident Logic_Block_Gates
\keys Logic Block Gates;Logic Block Editing
\browse Editor_Events_Logic Block Event
\heading Logic Block Gates

{\b\cf1 Logic Block Gates}

The seven gates are identical to one another.  Each has an input from the top and an input from the side.  For non-commutative operations the top input is the 'left' input and the side input is the 'right' input.  For example, the Arithmetic Minus operation subtracts the side from the top.

If the gate requires a logical value or an integer as an input then it translates the input as described in {\uldb Logic Block Values}{\v !ALink(LogicBlockValues)}

{\cf9 Copy From Top}
The default.
Top input and result are strings.  Side input is ignored.
Result = The value from the top input.  Side input ignored

{\cf9 Copy From Side}
Side input and result are strings.  Top input ignored.
Result = The value from the side input.  Top input is ignored.

{\cf9 Logical AND}
Top and side inputs and result are logical values.
Result is true if both top is true and side is true.

{\cf9 Logical OR}
Top and side inputs and result are logical values.
Result is true if either top is true or side is true (or both are true).

{\cf9 Numeric Plus}
Top and side inputs and result are integers.
Result is the ordinary addition you learned in grade school.

{\cf9 Numeric Minus}
Top and side inputs and result are integers.
Result = ordinary subtraction.  Top input minus side input.

{\cf9 Numeric Multiply}
Top and side inputs are integers.  Result is integer.
Ordinary multiplication.

{\cf9 Numeric Divide}
Top and side and result are integers.
Signed division.  Top divided by side.  Mathematicians beware....the result of dividing -5 by 3 is -1.  Any remainder has the same sign as the dividend.
You should also know that this division is done on the strings of digits and is therefore quite slow.  Dividing a 60-digit number by a 30-digit number to get a 30-digit quotient requires about 900 microseconds on my lowly Pentium 166.

{\cf9 Numeric Modulo}
Top and side and result are integers.
Result is the remainder when the top is divided by the side.  Again, mathematicians beware....the remainder has the same sign as the dividend.  For example, -8 modulo 3 is -2.
Also, see warning about speed in description of Numeric Divide.

{\cf9 Numeric Greater}
Top and side inputs are integers.  Result is logical true or false.
Result is true if top input is greater than side input.

{\cf9 GREP}
Top input and side inputs are strings.
Result is a string.  Result is the substring of the top input matched by the grep expression from the side input.  You might use this to search an item list for a particular item.  Examples:
{\S3 }"This is odd" GREP "odd"  =  "odd"
{\S3 }"abcdefghijklmnop" GREP "e.*l"  =  "efghijkl"
{\S3 }"/Axe//arrow//pipe bomb/"  GREP "/arrow/"  =  "/arrow/"

See the GPDL topic {\uldb Regular Expressions}{\v !ALink(RegularExpressions)}  for more details.

{\cf9 Force True}
Result is logical.  Both inputs are ignored.
Result is "1", the representation of true.

{\cf9 Force False}
Result is logical.  Both inputs are ignored.
Result is false, the empty string.

{\cf9 String Equal}
Both inputs are strings.  Result is logical.
Result is true if the two strings are identical.  Absolutely identical.  Case is significant.  Spaces are significant.

{\cf9 What do you need?}
Causes an error in editor.  It is here to remind you that you have to ask the developers to implement what you need to get your job done.

{\uldb Other Logic Block Topics}{\v !KLink(Logic Block Editing)}
\page
\title Logic Block Actions
\ident Logic_Block_Actions
\keys Logic Block Actions;Logic Block Editing
\browse Editor_Events_Logic Block Event
\alink LogicBlockActions
\heading Logic Block Actions

{\b\cf1 Logic Block Actions}

You can perform up to two actions either unconditionally or depending on the result of the computation of Gate-L.

Many of the actions have parameters as described below:

{\cf9 Do Nothing}
As you expect.  Nothing gets done.

{\cf9 Set Global ASL}
Define an entry in the global Associated String List (ASL) (See  {\uldb Associated String Lists}{\v !KLink(Associated String Lists)}).  The parameter provides the key for the entry and its new value separated by an equal sign.  If no equal sign exists, the entire parameter is taken to be the key and the value becomes the empty string.

{\cf9 Set Level ASL}
Define an entry in the level Associated String List (ASL) (See {\uldb Associated String Lists}{\v !ALink(Associated String Lists)}).  The parameter provides the level number and key for the entry and its new value separated by an equal sign.  If no equal sign exists, the entire parameter is taken to be the key and the value becomes the empty string.  The level is assumed to be the party's current level if the level number and the slashes are omitted.

The entire parameter takes the form:
/level/key=value

{\cf9 Set Party ASL}
Define an party's Associated String List (ASL) (See {\uldb Associated String Lists}{\v !ALink(Associated String Lists)}).  The parameter provides the entry's key and its new value separated by an equal sign.  If no equal sign exists, the entire parameter is taken to be the key and the value becomes the empty string.

{\cf9 Set Temporary ASL}
Define an entry in the temporary Associated String List (ASL) (See {\uldb Associated String Lists}{\v !ALink(Associated String Lists)}).  The parameter provides the entry's key and its new value separated by an equal sign.  If no equal sign exists, the entire parameter is taken to be the key and the value becomes the empty string.

{\cf9 Remove Global ASL}
The parameter is taken to be the key of the entry to be removed from the Global Associated String List (ASL). (See {\uldb Associated String Lists}{\v !ALink(Associated String Lists)}).

{\cf9 Remove Level ASL}
The parameter is taken to be the key of the entry to be removed from the levels Associated String List (ASL). (See {\uldb Associated String Lists}{\v !ALink(Associated String Lists)}).

{\cf9 Remove Party ASL}
The parameter is taken to be the key of the entry to be removed from the party's Associated String List (ASL). (See {\uldb Associated String Lists}{\v !ALink(Associated String Lists)}).

{\cf9 Set Quest Stage}
The parameter gives the name of the quest and the new stage separated by an equal sign. The absence of an equal sign or an illegal stage number will cause the action to be ignored and a log message to be written.

{\cf9 Set Character Attribute}
The parameter provides the name or number of the character, the name of the attribute, and the new value of the attribute.  The character selection comes first and is contained in parentheses.  Assume you want to assign the value 'yes' to an attribute named 'ZPrep'.  There are four ways of specifying the character:
{\S3 }By number.  (^3)ZPrep=yes
{\S3 }By name.  (Gothmog)ZPrep=yes
{\S3 }Active character  (^)ZPrep=yes
{\S3 }All characters    (*)ZPrep=yes
If no parenthesized expression preceeds the attribute name then the active character is assumed.
There is no way to remove an attribute belonging to a character.  The best that you can do is to set the attribute to the empty string:
{\S3 }(Gothmog)ZPrep=

{\cf9 GPDL Function}
This is really adding insult to injury for those of you who think that things are already too complicated.  But here it is and it is another powerful tool.  In a nutshell....You write a GPDL function that accomplishes the action you need.  The function has the form:
{\f3 $PUBLIC FUNC action () \{ .......\} action;}

But you only have to write the '.......' part; the rest will be provided free of charge by the Logic Block Editor. Wow!  Now you can do anything.

The ampersand substitution does not work in the parameter field of this action block.  However, the values of all the previously computed blocks are available to the GPDL function via by using the function $LOGIC_BLOCK_VALUE(ID).  But note that if you want to reference the values of the blocks in the current event, then you must set the 'Record Values at Runtime' control; else you will get values from some previous LOGIC_BLOCK event (in fact, this could be very useful!).

{\cf9 What Do You Need?}
This causes an error in the editor.  It is here to remind you that you have to ask the developers to implement what you need to get your job done.

{\uldb Other Logic Block Topics}{\v !KLink(Logic Block Editing)}
\page
\title Logic Block Inputs
\ident Logic_Block_Inputs
\keys Logic Block Inputs;Logic Block Editing
\browse Editor_Events_Logic Block Event
\heading Logic Block Inputs

{\b\cf1 Logic Block Inputs}

Each of the five inputs is identical and produces a character string (text).  The source of the string depends on the "input-type" and possibly an "input-parameter".  The parameter field may contain references of the form &A through &L.  These references are replaced with the text from the input or gate labeled with that letter.  The inputs, gates, and parameters are evaluated in alphabetical order so that it makes sense for the parameter in Input-D to reference &B but not the other way around because at the time parameter B is evaluated Input-D has not yet been computed.

Here are the Input Types along with an explanation of the parameter associated with each:

{\cf9 Literal}
The resulting string is whatever you type into the parameter field.

{\cf9 Global ASL}
The parameter names a global {\uldb Associated String List (ASL) Entry}{\v !ALink(Associated String Lists)}.  The resulting string is the value associated with that key in the global ASL.  If no such entry exists then the result is an empty string.

{\cf9 Party Size}
The result is a decimal number giving the number of characters in the party.

{\cf9 Party ASL}
The parameter names a party {\uldb Associated String List (ASL) Entry}{\v !ALink(Associated String Lists)}.  The resulting string is the value associated with that key in the party's ASL.  If no such entry exists then the result is an empty string.

{\cf9 Item List}
The parameter is the number of a party member.  The first member is zero, the second is one, etc.  Each items in that member's possession is added to the result in the form "slash item-name slash item-number slash".  For example:
    {\f3 /Axe of Rain/0//Key of G/1//Toothbrush/2/}

{\cf9 Character Info}

This function is deprecated.  The information about characters can be more easily gooten using the "Character Attribute" functions which are discussed a few inches down this page.

No parameter.  The result is an enormous string with information about all the characters in the party.  The format is:
   {\f3 /first character//second character//third character/  etc}
Each character's information is encoded as semi-colon delimited, tagged fields.  For example:
     {\f3 name=Richard;age=89;STR=12;AC=2;}
Note that the last field has a semi-colon to make it easier to do string searches.
So a complete string would be of the form:
   {\f3 /name=Paul;age=7;//name=Kevin;age=25//name=Alex;age=17;/ }
The following fields are currently included:
   name
   pos
   THAC0
   AC
   age
   maxage
   HP
   maxHP
   enc
   maxenc
   maxmove
   STR
   INT
   WIS
   DEX
   CON
   CHA
   race
   gender
   class
   align

{\cf9 Direction Facing}
No parameter needed.  The result is an integer: 0=north; 1=east; 2=south; 3=west.  Numbers are used so you can easily determine which direction is to the right, left, or rear by adding 1, 3, or 2 and then taking the remainder modulo 4.  (Or doing a bitwise AND with the integer 3.)

{\cf9 Level ASL}
The parameter is the level number and key for an entry in the level's {\uldb Associated String List (ASL)}{\v !ALink(Associated String Lists)}.  The result is the value associated with that key or an empty string if no such key defined.

The parameter is of the following form:
/level/key

{\cf9 Temporary ASL}
The parameter is the key for an entry in the temporary {\uldb Associated String List (ASL)}{\v !ALink(Associated String Lists)}.  The result is the value associated with that key or an empty string if no such key is defined.

{\cf9 Quest Stage}
The parameter is the name of the quest.  The result is the integer stage.

{\cf9 NPC List}
No parameter.  The result is a list of names and indexes of NPCs in the party.  Each has the format "slash name slash index slash".  For example:
   {\f3 "/Alex/0//Jon/1//Peter/2/"}

{\cf9 Character Attribute}
The parameter specifies both the character and the name of the attribute.  The character selection is first and is contained in parentheses.  There are three ways of specifying the character:
{\S3 }By number.  For example:   (^3)
{\S3 }By name.  For example:   (Gothmog)
{\S3 }The active character.   (^)
If Gothmog were the second character and highlighted then the complete parameter for obtaining his attribute named 'height' might look like any of the following:
{\S3 }(^2)height
{\S3 }(Gothmog)height
{\S3 }(^)height
If no parethesized selection appears before the attribute name then the active character is assumed.

{\cf9 Wiggle}
Use this input type to specify a subfield matched by a previous GREP expression.  The parameter is the subfield number.  For example, let us say that in Gate-C you searched the text:
{\f3    "(X,3,7)(Y,8,2)(Z,1,3)"}
using the GREP expression
{\f3    "\\(Y,([0-9]+),([0-9]+)\\)"}
The intent is to capture the two numeric values associated with the entry in the list which is named 'Y'.  Here the two numeric values to be captured are surrouned by parentheses. The first will be called subfield 1 and the second will be called subfield two.  Specifying 'Wiggle' with parameter "1" in input block D will result in "8" and using 'Wiggle' with parameter "2" in input block G will result in "2".  Remember that the blocks in the LogicBlock event are evaluated in alphabetic order!

Why is this input-type called 'Wiggle'?  Private joke.

{\cf9 GPDL Function}
This is really adding insult to injury for those of you who think that things are already too complicated.  But here it is and it is another powerful tool.  In a nutshell....You write a GPDL function that returns a value and that value is the value of the Logic Block input.  The
function has the form:
{\f3 
   $PUBLIC FUNC input (A,B,C,D,E,F) \{ .......\} input;}
But you only have to write the '.......' part; the rest will be provided free of charge by the Logic Block Editor.

The formal parameters A through F will be set to the current values of the pieces of the Logic Block of the same names so that your GPDL function can reference the other values in the Logic Block.  Wow!  Now you can do anything.

So, let us say you wanted to write a function that returned the value of input A if input B was equal to "x67", else "buzzz".  You would select 'GPDL Function' as the input-type and in the parameter area you might write:
{\f3   $IF(B=="x67")\{$RETURN A;\}; $RETURN "buzzz";}

The ampersand substitution does not work in the parameter field of this input block.  However, the values of all the previously computed blocks are available to the GPDL function via its formal parameters 'A' through 'F'.

All done.  That was not so hard.  Was it?  If it appears useful but you cannot figure it out then please ask the development team for help.  It is no good if you can't use it.


{\cf9 What Do You Want?}
No parameter.  The result is an error during editing.  This is here to remind you that you need to ask the development team to implement what you need to get your job done.

{\uldb Other Logic Block Topics}{\v !KLink(Logic Block Editing)}
\page
\title Associated Strings List
\ident Associated_String_Lists
\keys Associated Strings Lists
\browse Editor_Events_Logic Block Event_Attribute Lists
\alink Associated Strings Lists
\heading Associated Strings Lists

{\b\cf1 Associated Strings Lists}

For another view of this topic see {\uldb Associated String Lists}{\v !ALink(Associated String Lists)}.

This discussion is here because I could find no better place for it.  The Logic Block event probably does more to maintain Associated String Lists (ASLs) than any other event.....so here it is.


Associated String Lists are content-addressable arrays.  This means that such a list has a collection of named values and you can fetch or store the values by specifying the name.  Let us provide a concrete example.  Each character in  a game has his or her own ASL.  Initially the list is empty.  But you might wish to assign values to a character to keep track of how many times he/she has encountered Orcs or Goblins.  You might choose to give the names "Orcs Encountered" and "Goblins Encountered" to these values and, naturally, the value of each would be the number of times that character has encounted such a monster.

So the ASL for each character might contain the following entries:

{\S3 }Orcs Encountered
{\S3 }Goblins Encountered

And at some point in the game you might wish to reward any character who has encountered more than 15 Orcs or 23 Goblins.

The Logic Block event is a reasonable place to do all of this work.  When a combat with Orcs taks place, you could chain to a Logic Block event that would fetch the old value of "Orcs Encountered", add one to it, and put it back.  Then at a particular training event you could chain to another Logic Block event to reward anyone with sufficient Orc or Goblin experience.

All of this could be done with quests but the ASLs make it much more intuitive and easy because there is a separate list associated with each character.

There is an ASL associated with each:

{\S3 }Character
{\S3 }Level ({\uldb Level Associated String List}{\v !ALink(Level Associated String List)})
{\S3 }The game as a whole (Global ASL)
{\S3 }The game as a whole (Temporary ASL)
{\S3 }The Party as a whole (Party ASL)

{\cf9 
Somebody put the following in here.  I don't think it belongs. PRS 16Nov04.
{\S3 }Step Event
{\S3 }Event Control  (I don't know what that is!)
{\S3 }Game Event
{\S3 }Quest
{\S3 }Special Object
{\S3 }Item
{\S3 }Zone
{\S3 }Monster
{\S3 }Spell
{\S3 }Race
}

As the name implies, the 'Temporary ASL' is not saved with the game.  All entries are lost when you save the game and then reload it.  The temporary ASL is used to hold values that will be used immediately.  For example, it might be used to communicate information between events in an event chain.
\page
\title Level Associated String List
\ident Level_Associated_String_List
\keys Level Associated String List
\browse Editor_Events_Logic Block Event_Attribute Lists
\alink Level Associated String List
\heading Level Associated String List

{\b\cf1 Level Associated String List}

As with any Associated String List (ASL), you are welcome to add entries to the list of entries on each level of your design.  You might add an entry named "Familiar with Level" if the party has visited all the zones on the level, for example.

There are some special aentries that can affect the placement of walls and the blockages (can the party pass through?) on a level.  The keys of these entries contain the x- and y-coordinates of the wall and the side of the room the wall is on.  The keys are:

{\S3 }"$Wall,x,y,dir"
{\S3 }"$Block,x,y,dir"

The value of the $Wall,x,y,dir is the slot number of the wall that should appear at that position.  The value of the $Block,x,y,dir is the literal "OpenBlk" if the party can pass through the wall.  The dir part of the name is "N", "E", "S", or "W".

Example:
{\S3 }$Wall,5,3,E=0
{\S3 }$Block,5,3,E=OpenBlk

These two ASL entries would make the east wall of cell 5,3 disappear and become passable to the party.  If these two entriess were later deleted then the original wall (if any) and the original blockage as specified during the design of the game would become the default.

Attributes such as these can be manipulated at runtime using the {\uldb Logic Block event}{\v !ALink(Logic Block Event)} or a {\uldb GPDL}{\v !ALink(GPDL)} script.
\page
\title Editing Spells
\ident Editing_Spells
\keys Editing Spells
\browse Editor_Magic
\heading Editing Spells

{\b\cf1 Editing Spells}
To edit a spell, use the menu option Database->Spells. Select a spell in the list and press the 'Edit' button. You will then see a dialog such as the one below.

\{bmc images\\SpellEdit.bmp\} 

There are several options that affect how a spell will operate. For a spell to have an effect upon characters, you must add affected attributes to the attribute list. For instance, to create a healing spell called 'Cure Light Wounds' you would add to the list an attribute that modifies a character's hitpoints. The attribute system will be explained in more detail later.

{\b {\cf9 Warning!}}
There are just too many possibilities and combinations for exhaustive testing to be performed, so some things haven't been tested yet. Since spells can modify game variables there is an inherent danger of causing the program to crash. Expect problems and keep backups of your design files, and I do mean *frequent* backups. The spell system should prove to be more stable in subsequent releases.

{\b Name:} The name of the spell, up to 50 characters. Every spell name must be unique. You can decorate names so that they are unique. For example, if you want Clerics and MagicUsers to have spells called 'Detect Magic', you can call them 'Detect Magic|cleric' and 'Detect Magic|mu'. Remember that any characters appended using '|' as in '|cleric' will only be visible in the editor, not while playing the design.

{\b Class:} Either Cleric or Magic User. This is the school of magic that the spell belongs to. Only one can be chosen.

{\b Can be cast by:} Select the character classes that will be allowed to cast this spell. This allows you to create clerical spells that can only be cast by Rangers and Druids (for instance). Only Magic Users can cast spells that belong to the Magic User school, so this option is disabled for Magic User spells. 

{\b Level:} The spell level. Spell progression for characters follows the ADnD 2E rules.

{\b Casting Time:} Specifies the time between when a caster starts casting and when the spell actually takes effect. Enter a numeric value and then choose the unit of time. You can select from four options. If not in combat, a spell will always be cast immediately. If a caster is attacked in combat during this time the spell will be aborted.

Immediate - There is no delay before spell is cast
Initiative - Number of combat initiative turns
Rounds - Number of combat rounds
Turns - Number of combat turns

{\b SaveVs:} For spells that give the target a chance to make a saving throw to avoid some or all of a spell's effects. There are five possible tables to choose from. The saving throw table values come from ADnD 2E rules.

{\b Save Result:} Choose what will happen if a spell target makes a successful saving throw. There are four options. Spells that are cast upon party members by party members will not use saving throws.

No Save - No saving throw is allowed by the target
Save Negates - A successful save will avoid all spell affects
Save for Half - A successful save will give target only half
Use Player THACO - Roll 1D20 against target's THACO for saving throw.

{\b Duration:} A value which specifies how long the spell will last. This field is used in combination with the Duration Rate field. Duration is a {\uldb DICEPLUS}{\v !KLink(DicePlus)} field.

{\b Duration Rate:} This lets you choose the rate of time used for the duration value above.

In rounds - Duration indicates number of rounds
By damage taken - Duration indicates total damage taken in hitpoints
In hours - Duration is number of hours
In days - Duration is number of days
Instantaneous - means permanent, the spell effects don't expire

{\b Cast Price:} How much the party is charged for this spell if it is offered by a Temple event.

{\b Targeting Type:} What sort of method is used to select spell targets.

Self - can only be cast on yourself

Selected by count - specify a total number of targets

Whole party - automatically affects entire party

Touched targets - specify a total number of targets that are within 1 tile distance

Area: Circle - choose map location, the location will be the center of the circle of the configured size. All targets in the circle will be selected.

Selected by hit dice - choose targets until hit dice total is reached

Area: Line, Pick Start - choose map location, a line will be extended from this starting location. The direction of the line is determined by the relative orientation between caster and map location. If you select a location that is south east of the caster, then the line will extend in the south east direction.

Area: Line, Pick End - choose map location, all targets in a line that extends from caster to the map location will be selected.

Area: Square - choose map location, the location will be the center of the square of the configured size. All targets in the square will be selected.

Area: Cone - choose map location, the location will be the beginning of a cone (really just a triangle). The direction of the cone is determined by the relative orientation between caster and map location. If you select a location that is south east of the caster, then the cone will extend in the south east direction.

{\b Num Targets (or Self):} How many spell targets can be chosen. Not used if Targeting Type is Self or Whole Party. Num Targets is a {\uldb DICEPLUS}{\v !KLink(DicePlus)} field.

{\b Target Range (or Self):} Valid only for three Targeting Types. Target Range is a {\uldb DICEPLUS}{\v !KLink(DicePlus)} field.

{\b Sound:} Choose the sounds played when the spell reaches each stage (casting, in route to target, etc).

{\b Casting Sprite:} Choose the animation displayed as the spell is cast.

{\b In-Route Sprite:} Choose the animation displayed as the spell travels from caster to target.

{\b Coverage Sprite:} Choose the image that is briefly displayed over the target or target area after the spell reaches the target. Example: the fireball flames that cover the target area. If the spell uses 'Area: Cone' targeting, then the coverage sprite should use the 'Directional' animation style and have eight images, one for each compass direction. The image that matches the cone orientation will be used. If using any other targeting type, the coverage sprite should use the 'Sequenced' animation style.

{\b Hit Sprite:} Choose the image that is briefly displayed on each target if the spell successfully affects the target.

{\b Linger Sprite:} The image that remains displayed on the map while the spell is in affect. Example: think of the stinking clouds that linger on the map until the spell expires.

It is used to display an animation on the combat map that covers the portion affected
by a lingering spell, until the spell expires. Combatants who walk into the spell area are affected by the spell as if the spell was cast directly on them. The animation work in the same manner that I perceived the UA linger animation to work. That is, the spell area is covered by multiple instances of a 1x1 tile animation. The spell area being the portion of the combat map squares which are affected by the spell. The spell area has different, configurable, shapes - cone, square/rect, circle. If the spell area is a 2x2 square, then there will be four instances of the same animation inside it running in sync. Each animation is the usual multi-frame strip of pics, with
configurable time delay between frames.

{\b General Sprite Info:} Except when using the 'Area: Cone' targeting type, your sprites should use the 'Sequenced' animation style. Each sequenced image should be a multiple of 48 pixels in width and height. The animation sequence follows left to right. You can set the delay time between each image, and whether it loops, how many times to loop, and so on. 

The Cone animations use the Directional animation style: eight frames, one frame for each compass direction in the order of North, East, South, West, NorthWest, NorthEast, SouthWest, SouthEast.

{\b Special Abilities:} This will allow you to select from a list of special abilities that will be given to the spell target for the duration of the spell.

{\b Spell Attributes:} This allows you to add custom tags to the spell that can be queried by other spell scripts. For instance, I create a spell called Protection From Fire and give it a spell attribute of 'ProtectsFromFire=1'. Then I create a second spell called Fireball, and give it a Spell Attribute of 'FireBasedSpell=1'. Assuming I have a character who has the Protection From Fire spell cast on it, I can choose to completely disable the Fireball spell when cast on this character by using an activation script for the Fireball spell such as:

$IF ($IS_AFFECTED_BY_SPELL_ATTR($Target(), "ProtectsFromFire"))
\{
  $RETURN false;
\}
$ELSE
\{
  $RETURN true;
\};

which would disable the Fireball spell for any spell that has the ProtectsFromFire attribute. I could also disable the spell only for the Protects From Fire spell by using this script,

$IF ($IS_AFFECTED_BY_SPELL($Target(), "Protection From Fire"))
\{
  $RETURN false;
\}
$ELSE
\{
  $RETURN true;
\};

which is using the spell name rather than a spell attribute. The spell names are unique, while the spell attributes can be shared by many spells.

To continue this example, suppose I wanted to just set the hit point damage to half instead of voiding the entire spell effect. The 'Change By' value is been calcuated based upon the DicePlus expression, and let's say it turns out to be the value -10. The affected character attribute is probably $CHAR_HITPOINTS, and so in the absence of any scripts the Fireball spell will add -10 to the spell target's current hitpoints (remove 10 hitpoints). I could add a script like this to drop the damage to -5 if the spell target is currently protected by a Protection From Fire spell,

$IF ($IS_AFFECTED_BY_SPELL_ATTR($Target(), "ProtectsFromFire"))
\{
  $RETURN ( $DIV( $TIMES($CURR_CHANGE_BY_VAL(),"-1"), 2) );
\};

This script goes into the Modification Script box. It basically checks to see if the spell target is currently under the influence of a spell which has the 'ProtectsFromFire' spell attribute. If so, it queries the current Change By value which is -10, and divides it by two using the $DIV function. Since the result of a modification script is always added to the current Change By value, an equation such as -10 + 5 = -5 is needed to reduce the damage by half. This is why the above script multiplies the current Change By value by -1 (using $TIMES) before dividing by 2. If the Change By value is -10, we end up with -10 + 5 = -5, and if the Change By value is 10 we get 10 + -5 = 5.

To get even fancier, I could divide by 2 only if the spell target makes a saving throw versus spells with,

$IF ($IS_AFFECTED_BY_SPELL_ATTR($Target(), "ProtectsFromFire"))
\{
  $IF ($SaveVsSpell($Target())
  \{
    $RETURN ( $DIV( $TIMES($CURR_CHANGE_BY_VAL(),"-1"), 2) );
  \};
\};

Remember that the spell itself has a saving throw setting which can further reduce the Change By value applied to the spell target. 

The modification scripts will always return zero in the absence of an explicit $RETURN value, which will not modify the Change By value at all.

{\b Begin/End Scripts:} You can add a 'begin' script, which is a GPDL script which is invoked for each spell target as the spell is activated. You can also add an 'end' script, which is invoked when the spell expires. For permanent spells, only the 'begin' script will be executed.

{\b Combat Only:} If checked, this spell can only be cast during combat.

{\b Cumulative:} If checked, you can cast the same spell multiple times on a target and whatever affects it has will be cumulative. In not checked, the spell will not further affect a target which is already affected by this spell. Each affected character attribute can also be individually selected as being cumulative.

{\b Friendly Fire Ok:} If checked, this spell can be cast upon members of the party.

{\b Players can memorize:} If checked, this spell can be memorized and cast by players. If not checked, the players will never get the option to memorize this spell. This has no affect on monsters/NPCs in combat.

{\b Allow scribing at level change:} Not available for Cleric spells, since Clerics have all spells available to them (within class limits). Magic Users must choose spells to add to their spell book. At each new level attained by the Magic User, a list of spells will be presented that they can choose from. If you want this spell to be automatically given to the Magic User, then check this box. The Magic User will still be given the option to choose additional spells to add to their spell book, and can choose until their spell limit is reached. You cannot automatically give more spells to the Magic User than are allowed by class/skill limits. If you automatically give enough spells to the Magic User so that the class/skill limits are reached, then the additional spells will be displayed but cannot be chosen.

{\b Lingers on map:} If checked, this spell lingers on the map, creating a visible area which can affect combatants if they walk into the spell area.

{\b Affects target once:} If checked, each combatant that walks into a linger spell area can be affected only once by the spell. If not checked, the combatant can be affected once per combat round while remaining in the linger area.

{\b Spell's duration on target:} A value which specifies how long the spell effects which are applied to the spell target will last. This field is always in terms of combat rounds, and it is a {\uldb DICEPLUS}{\v !KLink(DicePlus)} field.

Example: Suppose Hexbo casts a Stinking Cloud spell on the combat map, and it creates a 2x2 square area of effect (the linger area). Molson the Dark walks into the linger area and fails the saving throw. Molson will feel the effects of this spell for the duration specifed by the field 'Spell's duration on target'. The Stinking Cloud spell has a separate duration specified elsewhere. The Stinking Cloud spell might expire before Molson stops feeling the spell's effects, or vice versa.

{\b Attributes:} This list displays all character {\uldb attributes}{\v !KLink(Attribute Introduction)} that can be affected by the spell. Four columns are shown:

Affected - shows the actual attribute affected, such as '$CHAR_THACO'
Change by - shows the delta value applied to the attribute
Cumulative - Yes/No
Activation - shows the activation script used, if any.

You can choose to 'Add', 'Delete', or 'Edit' each attribute in the list by highlighting one with the mouse and pushing the appropriate button. Attributes in the list will be modified for the duration of the spell.

Each attribute in the list will be modified in the order listed. When writing scripts keep in mind that character values being queried may return values that have been modified by an attribute modification that came earlier in the list. In other words, the ordering of the attribute modifications might be an issue if subsequent scripts rely on character values having their unmodified values.

{\b General Information:}

A spell does not always need to modify character attributes. For instance, a Magic User spell called 'Knock' is available by default and it does not modify anything. However, it can be specified by the wall slot editor as the spell which unlocks doors. Simply by having it memorized, a character will be given the option to cast Knock when faced with a locked door requiring this spell.

Spells can be created that will never be available for use by the party. For instance, a spell called 'MonsterPoison' is available by default and it is used for special attacks by monsters that can poison characters.

Spells can give or take items to/from characters. For instance, the spell called 'Spiritual Hammer' invokes a script that grants an item called 'Spiritual Hammer' to the spell target. This item exists in the item database by default. For the duration of the spell, the spell target can 'Ready' this weapon and use it in combat. When the spell expires, the item is removed from the character.
\page
\title Spell Attributes
\ident Spell_Attributes
\keys Spell Attributes
\browse Editor_Magic
\heading Spell Attributes

{\b\cf1 Spell Attributes}
When you add a spell attribute, you will see the following dialog.

\{bmc images\\SpellAttributes.bmp\} 

{\b Attribute Affected:} This is a list of all possible attributes that you can select from. Read-Only attributes are not included.

{\b Change:} This {\uldb DICEPLUS}{\v !KLink(DicePlus)} field indicates the total modification made to the selected attribute. If you check the 'Delta' box, then the modification will be a literal delta made to the existing attribute value. If you check the 'Percent' box, then the modification will be a percentage of the current attribute value. If you check 'Absolute', then the modification will become the current value for the attribute.

{\b Affects Who:} Indicates who receives the attribute modification. If 'Target', then the spell target attributes are changed. Only the Target option is currently supported.

{\b Cumulative:} If checked, then the modifications made are cumulative with other attribute modifications currently in effect for the same attribute. If not checked, then this attribute modification will be ignored when the spell is cast. 

Example: Assume two spells that both modify $CHAR_THACO, Spell A enables cumulative, Spell B does not.

Scenario 1: Spell A is cast first, then Spell B.
Result: First $CHAR_THACO modification is made, second one is not.

Scenario 2: Spell B is cast first, then Spell A.
Result: First $CHAR_THACO modification is made, and second one is also made since it is cumulative.

This option only affects an individual attribute modification. If a spell modifies other attributes they will be decided upon individually.

{\b Conditional Activation Script:}
In this text box you can type a script that will be evaluated when the spell is cast. All scripts must return 0 for failure and 1 for success. If 1 is returned, then the attribute modification will be allowed. If 0 is returned then the modification will be ignored. The script does not need to be used, it is optional. If no script is present the spell will perform the indicated attribute modification unconditionally. You can substitute the keywords 'true' and 'false' for '1' and '0'.

As an example, suppose you want to modify an attribute only if the spell target is an {\uldb Elf}{\v !KLink(Race Values)}. Then you can enter this script: 

{\f3
   $IF ($Race($Target())=="Elf") 
   \{
      $RETURN true;
   \}
   $ELSE
   \{ 
     $RETURN false;
   \};
}

or more simply

{\f3
   $RETURN ($Race($Target())=="Elf");
}

{\b 'Change By' Modification Script:}
In this text box you can type a script that will be evaluated and used to modify the DICEPLUS value in the 'Change By' box. This script can return any value. Whatever is returned will be added to the value computed for 'Change By'. You can query the current 'Change By' value using the script function $CURR_CHANGE_BY_VAL.

{\b Saving Throw Modification Script:}
In this text box you can type a GPDL script that will be evaluated when the spell target's saving throw is computed. The value returned from this script will be added to the saving throw roll (1d20). This script will have no effect if the spell is configured not to use a saving throw.

{\b Script Function List:}
This is a list of all GPDL functions that can be used in a spell script. Each line indicates the function name, return type, and proper number of parameter types. Remember that GPDL treats all values as text strings, so even though a function returns a string it may still be thought of as a number. For instance, the AlignmentGood function will return a "1" or "0" based on the alignment of the character being queried.
\page
\title Spell Scripts
\ident Spell_Scripts
\keys Spell Scripts
\browse Editor_Magic
\heading Spell Scripts

{\b\cf1 Spell Scripts}

The spell scripts use GPDL script syntax. There is detailed information about GPDL syntax with examples in this help file.

GPDL simply provides a way to evaluate a script while the engine is running. Dungeon Craft extends the usefullness of the scripts by providing custom functions which allow a script to access game variables.

Some functions have meaning only during combat. If the script is evaluated when not in combat it will be interpreted as well as is possible. For instance, 'NearestEnemyOf' will return 0 if not in combat, while 'Nearest' will simply return a party member that is closest in marching order.

{\b Basic Script Syntax}
This is not full description of GPDL syntax, you can read the GPDL documentation for that. Rather, this shows you basic scripts so that you get a feel for what proper syntax looks like. It will be very helpful in understanding GPDL scripting if you are already familiar with other scripting or programming languages. The following documentation will not teach you how to program. The syntax is not too difficult to understand, so give it a try even if you don't know how to program. The scripts are optional so don't worry about using them if you don't feel like learning the syntax. If a spell attribute does not employ a script then it will automatically take affect.

Remember that scripts must return a 0 or 1 for them to have any effect in decisions made by Dungeon Craft. You can substitute the keywords 'true' and 'false' for '1' and '0'. From Dungeon Craft's perspective, returning 1 means True/Yes/Success while return 0 means False/No/Failure. If a script returns 1, then the spell attribute will be used, and if it returns 0 the attribute modification will not  happen.

Look at the following script and we will explain it afterwards.

   $IF ( $Class($Target()) == "Fighter" )
   \{
      $RETURN true;
   \}
   $ELSE 
   \{
      $RETURN false;
   \};

First, there is '$IF' which is tests for a condition. An '$IF' test will execute one of two following statements depending on whether the tested condition is 1 or 0 (or true/false). In the above script, '$RETURN true' is executed when the test is true and '$RETURN false' is executed when the test is false. The '$IF' statement can be summarized as

{\f3
   if (TRUE)
     execute success code
   else
     execute failure code
} 

The example script shows a test for '$Class($Target())=="Fighter"'. There are really two Dungeon Craft functions being called here. The first is '$Target()' and it is nested within the '$Class()' function. Evaluation precedence follows typical conventions for parenthesized terms. In this case, '$Target()' is called first and it returns a value representing the current spell target. The returned target is then passed to the function '$Class()'. The '$Class()' function returns a string representing the class of the target, such as "Fighter" or "Cleric". This string is compared with the "Fighter" string using the operator '=='. The result is either true or false, and thus the code will branch to the success or failure code depending on the result.

In english, the sample script returns true if the character class of the spell target is a Fighter, else it returns false. This example script could be simplified to

{\f3
  $RETURN ( $Class($Target()) == "Fighter" );
}

Script syntax can be validated in the editor. If it is not valid, typical reasons are
{\S3} Mis-spelled function names (function names are case-sensitive)
{\S3} Mis-matched parenthesis or brackets
{\S3} Missing the '$' preceeding GPDL function names
{\S3} Missing the ';' at the end of a line or right bracket

{\b Creature and Object Identification}
When a script needs to reference a creature or object, it identifies such using an ActorType. An ActorType contains information that uniquely identifies a creature or object. Dungeon Craft provides several functions that allow retrieval of ActorType data. Please refer to the GPDL help for a listing of available functions.
\page
\title Spell Not Working?
\ident Spell_Not_Working?
\keys Spell Not Working?
\browse Editor_Magic
\heading Spell Not Working?

{\b\cf1 Spell Not Working?}

If you have created a spell and your character cannot cast it, the usual reason is because you have left the Num Targets blank or 0.

You should check the error log for some indication of what failed if you don't see any explanation. If all else fails, send me the error log and maybe I can figure it out.
\page
\title Importing Art
\ident Importing_Art
\keys Importing Art
\browse Editor_Importing
\heading Importing Art

{\b\cf1 Importing Art}

First, some links to FRUA newsletter articles about artwork:

Walls:

http://www.frua.dns2go.com/pc/uanews/uanl22/art01.htm

Dungeons:

http://www.frua.dns2go.com/pc/uanews/uanl22/art03.htm
http://www.frua.dns2go.com/pc/uanews/uanl26/art.htm

Icons:

http://www.frua.dns2go.com/pc/uanews/nlhtm04/combat.htm
http://www.frua.dns2go.com/pc/uanews/nlhtm13/icon.htm
http://www.frua.dns2go.com/pc/uanews/nlhtm14/combat.htm

Character Pics:

http://www.frua.dns2go.com/pc/uanews/nlhtm06/draw.htm


Now some general notes on converting FRUA art to something usable with DC:

I have been using Paint Shop Pro 6 to do this, so your results may vary. 

After conversions are completed, place the correct transparent color at 0,0 if needed (see below for transparency). I would recommend using caution when
anti-aliasing images that use transparency since this can alter the transparent pixels slightly and they will be mistakenly drawn to the screen.

To convert:

Icons:

Resize to 640x286 maintaining aspect ratio, move one of the tiles so
that it directly abuts it's neighbor, crop image down to just icon data. Result should be a multiple of 48 in both directions.

Big Pics,Small Pics,Backdrops:

Resize to 640x480 *without* maintaining aspect ratio, crop down to include only image data.

Combat walls:

Resize to 640x400 maintaining aspect ratio. The file can be made smaller by
cropping the image down so that the empty black space is removed.

Doors, overlays, walls:

Resize to 640x480 *without* maintaining aspect ratio. The walls can be
cropped down to reduce file size. The doors/overlays take some extra work, but the goal is to make the image data for each door/overlay align with coordinates used by the corresponding wall images:

{\S3 }add 130 pixels to left side of image, making it 770 pixels wide
{\S3 }move last image that is in upper right corner to second row, left side. Should be 0,120 for the upper left pixel.
{\S3 }at this point the wall and door/overlay images should align for x coordinates, but the y coords (vertical) need to be tweaked for each door/overlay. Simply determine the bottom y coord for each wall image, and move the corresponding door/overlay up or down so that it's bottom y coord matches.
{\S3 }the largest door/overlay image may need to be moved slightly to the right to make it be drawn in the center of the largest wall section.
{\S3 }since walls/doors/overlays use transparency, either the bounding boxes for the doors/overlays need to enlarged to match the wall boxes, or, the quickest procedure is to fill the black areas of the image with the transparent green color, then color the pink boxes in the green color also.

For all artwork, if an image will be drawn using transparency, the transparent color is always determined from the color of the image pixel at 0,0 (upper left). Whatever that color is, it will not be transferred >from the source.

At the moment, the following pic types use transparency:

Sprites
Walls
Doors
Overlays
Icons
Fonts (except highlight font)

and the following pics do not use it:

title
combat walls, indoor and outdoor
backdrops
maps
big pics
small pics (even when animated, although this might become user selectable at some point)
combat cursor
combat death animation
frame art
area view art

The current image sizes for a 640x480 game engine screen are:

Wall (default format) - 576x368
Sprite - 528x211
icons - multiple of 48, two frames, in order of ready, attack. 1x1=96x48
title - 640x480
backdrop, small pic - 176x211
map, big pic - 608x288
combat cursor - 48x48
combat dying icon - 48x48
combat death animation - 96x48, two frames that are alternated rapidly when a creature dies

The current image sizes for a 800x600 game engine screen are:
(only diffs from 640x480 are listed)

Wall (default format) - 864x552
Sprite - 792x324
backdrop, small pic - 264x324
map, big pic - 772x436

The current image sizes for a 1024x768 game engine screen are:
(only diffs from 640x480 are listed)

Wall (default format) - 1152x736
Sprite - 1056x433
backdrop, small pic - 352x433
map, big pic - 996x628

Font images are created by the game engine
\page
\title Importing FRUA Designs
\ident General
\keys Importing FRUA Designs
\browse Editor_Importing_Importing FRUA Designs
\heading Importing FRUA Designs

{\b\cf1 Importing FRUA Designs}

Dungeon Craft can import most portions of an FRUA design. This includes global design data, overland and dungeon levels, events, monsters, NPCs, and items.

Some things that do not import:

- Art
- Sounds
- Spells
- Special Abilities

Since artwork is not imported, the overland maps will be given a default overland image. The events, zones, and blockages for the overland map should still import ok. The wall and backdrop art for dungeon levels will be closer to the original settings if you use the UA wall and backdrop art packs. Both are available on the Magic Mirror download site. Unzip them into the DefaultArt folder. This will give you the standard UA wall/backdrop art as the default when you start the editor. If you do not follow this procedure then the imported design will use default DC wall/backdrop art instead. The event art (small/big/sprite pics) and sounds are left empty.
\page
\title Getting Started
\ident Getting_Started
\keys Getting Started
\browse Editor_Importing_Importing FRUA Designs
\heading Getting Started

{\b\cf1 Getting Started}
The import process begins by selecting the menu option File->Import FRUA. You will then see the following dialog.

\{bmc images\\UAImport.bmp\} 

Nearly all UA designs will have references to items, monsters, and NPCs. It is highly recommended that you import these things prior to importing the actual UA design files so that such references can be resolved.

The box labeled 'Path to your Unlimited Adventures installation folder' should contain the path to your UA installation folder. This will be used to automate selection of the UA items and monster DAT files. Once you select the UA folder it will be remembered by the editor.

If you select 'Remove current Items before starting import' then all items in your current design will be removed before the item import process begins.

If you select 'Remove current Monsters/NPCs before starting import' then all monsters and all NPC's will be removed before the monster/NPC process begins.

If you do not select these options, then the current data will be retained and imported data will be merged. If imported data has the same name as existing data, then the imported data will be given a unique name. For example, if you have an item called 'Long Sword' and you import an item with the same name the imported item will be called 'Long Sword|1'. Subsequently imported 'Long Swords' will have '|2', '|3', etc added to them to keep the names unique. The added portion, such as '|1', is visible only in the editor. When playing the design all such items will be displayed as 'Long Sword'.

The 'Items' button will display the following dialog:

\{bmc images\\UAImportItems.bmp\} 

Use this dialog to browse for the folder containing the item DAT files you wish to import. There are two files needed, items.dat and item.dat. Both files should be in your '/UA/DISK1' folder. The select folder should be displayed in the box labeled 'Current Folder' as in the above picture. Once your folder is selected press the 'Select' button and the item import process will begin. A status message will be displayed after the import completes to notify you of success or failure of the import.

UA provides 127 monsters and NPCs, and all 127 DAT files can be downloaded in a single zip file from the Dungeon Craft website. It is recommended that you import all 127 DAT files prior to importing a design.

If you check the 'All in folder' option before importing monsters, then the 'Monsters/NPC' button will provide a dialog similar to the 'Items' dialog. Use it to choose the folder where your MONST*.DAT files reside. If do not check the 'All in folder' option, then you will be able to select a single MONST*.DAT file to import.

If you check the 'Include Items' option then the items in '/UA/DISK1' will be automatically imported before the monsters. If you do not check this option then only the monster data will be imported.

As with items, a status message will be displayed after the import process completes.

The 'Spells' button is always disabled because UA spells cannot be imported yet.

The 'Design' button will display a dialog that allows you to choose a UA design folder to import. The folder must end with '.dsn' as in 'MyDesign.dsn'. If you check the 'Include Items' option, then the items in the '/UA/DISK1' folder will be automatically imported before the design files. If you check the 'Include Monsters/NPCs' option, then all MONST*.DAT files in the '/UA/DISK2' folder will be imported before the design files. A status message will be displayed after the import process completes.

It is recommended to follow this procedure when importing a UA design:

- Check the 'Remove current items' and 'Remove current monsters' boxes.
- Check the 'All in folder' and 'Include Items' options next to the 'Monsters' button. 
- Download the 127 monster DAT files and import them with the 'Monsters' button.
- Uncheck the 'Include Items' and 'Include Monsters' options next to the 'Design' button.
- Use the 'Design' button to import your UA design.
\page
\title Database Utilities
\ident Database_Utilities
\keys Database Utilities 
\browse Editor_Database Utilities
\alink InternalDatabase
\heading Database Utilities

{\b\cf1 Database Utilities}

Each of these databases exists in three forms:

{\S3 }Ascii text file  {\f3 (*.txt)}
{\S3 }Binary game design file  {\f3 (*.dat)}
{\S3 }Internal editor data structures.

The databases contain descriptions of objects used in the game.  When you invoke the editor it reads the ascii-text version of the database into its internal data structures.  When you open an existing game the editor reads the binary databases from the design folder into its internal data structures, and when you save a game the editor writes its internal data structures to the binary databases in the design folder.

The ascii text files can be edited with any standard text editor.  The internal data structures and binary files should only be edited using the UAF editor.

The "Database Utilities" menu provides methods of importing and exporting the ascii and binary files from/to the internal data structures and editing internal data structures or the ascii text databases.

The first part of the menu lists options to edit the internal editor data structures.  These are the structures that will be written to the game design files when you "Save" the game you are designing.  These options are listed as:

{\S3 }{\uldb Edit Monsters}{\v !ALink(EditMonsters)}
{\S3 }{\uldb Edit Items}{\v !ALink(EditItems)}
{\S3 }{\uldb Edit Spells}{\v !ALink(EditSpells)}

The second part of the Database menu allows you to:

{\S3 }{\uldb Import database text files}{\v !ALink(ImportDatabaseTextFiles)}
{\S3 }{\uldb Import database binary files}{\v !ALink(ImportDatabaseBinaryFiles)}
{\S3 }{\uldb Export database text files}{\v !ALink(ExportDatabaseTextFiles)}
{\S3 }{\uldb Edit database text files}{\v !ALink(EditDatabaseTextFiles)}.
\page
\title Database Object Names
\ident Database_Object_Names
\keys Database Object Names
\browse Editor_Database Utilities
\alink DatabaseObjectNames
\heading Database Object Names

{\b\cf1 Database Object Names}

Database objects such as spells, items, and monsters must have unique names.  This is an absolute necessity if references between the databases are to work.  For example:

Let us say that an item called a "Wand of Zapping" is capable of creating a "Green Fire" spell.  The items database entry for the wand will name the spell and if the name is not unique then the wrong spell will be invoked.

It is often desirable to have multiple items (or perhaps spells or monsters) that have the same name and appear to the player to be identical.  For example, one "Wand" may be capable of healing while another "Wand" is not.  So the names the player sees must be the same.  In order for the designer of the game to distinguish between objects of the same name a qualifier may be added to the name.

A qualified object name is formed as follows:

  objectname|qualifier

The qualifier is maintained in the database files but is dropped by the runtime game engine.  The player never sees the qualifier.  So the designer is free to create as many "Wand"s as seems appropriate:

{\S3 }Wand
{\S3 }Wand|healing
{\S3 }Wand|greenfire
{\S3 }Wand|youth

will all appear to the player as simply "Wand". Note that the separator used here is the vertical pipe, ASCII 124=0x7C.
\page
\title Editing Items Database
\ident Editing_Items_Database
\keys Editing Items Database
\browse Editor_Database Utilities
\alink EditITems
\heading Editing Items Database

{\b\cf1 Editing Items Database}

The "Edit Items" option of the "Database" menu provides a means of viewing the names and characteristics of the items data currently present in the editor's internal items database.  It is this database that will be written to the game design folder and named "items.dat".

In actuality, you are editing a temporary copy of the items database and it will only become the permanent, working copy when you press the "OK" button".

When you first select the "Edit Items" option you will see a list of all the items along with five buttons:

{\S3 }Add - Create a new item
{\S3 }Edit - Modify an existing item
{\S3 }Delete - Delete and existing item
{\S3 }OK - Save changes and terminate item edit
{\S3 }Cancel - Discard changes and terminate item edit

{\cf9 Add Button}

Pressing the "Add" button causes a new item to be created with the name "New Item" and default characteristics.  An edit dialog will appear with an "OK" and "Cancel" button.  Pressing the "Cancel" button cancels your request to add the item and pressing the "OK" button adds the new item to the {\uldb editor's internal database}{\v !ALink(InternalDatabase)}.

Before you add the new item by pressing "OK" you will probably want to change some of the default characteristics but you should, at the very least, change its name to a {\uldb name that is unique}{\v !ALink(DatabaseObjectNames)} among items.

{\cf9 Edit Button}

To edit an existing item, select it from the list of items by clicking on its name (the selected item will be highlighted) and then pressing the "Edit" button.  The edit window showing the characteristics of the item will appear, along with an "OK" button and a "Cancel" button.  Pressing "OK" incorporates your changes and pressing "Cancel" throws your changes into the bit bucket.

{\cf9 Delete Button}

To delete an existing item, select it from the list of items by clicking on its name (the selected item will be highlighted) and then pressing the "Delete" button.  The deletion is rather permanent.  Be careful.  The only way to get the item back is to cancel all the editing you have done since opening the "Items Editor" window.

{\cf9 OK Button}

Pressing the "OK" button means that you wish to accept all the changes you have made to the items database and file them away in the editor's internal data structures.

{\cf9 Cancel Button}

Pressing the "Cancel" button means that any changes you have made to any of the items since you opened this "Items Edit" window will be lost.  Be careful.
\page
\title Editing Spells Database
\ident Editing_Spells_Database
\keys Editing Spells Database
\browse Editor_Database Utilities
\alink EditSpells
\heading Editing Spells Database

{\b\cf1 Editing Spells Database}

The "Edit Spells" option of the "Database" menu provides a means of viewing the names and characteristics of the spell data currently present in the editor's internal spell database.  It is this database that will be written to the game design folder and named "spell.dat".

In actuality, you are editing a temporary copy of the spells database and it will only become the permanent, working copy when you press the "OK" button".

When you first select the "Edit Spells" option you will see a list of all the spells along with five buttons:

{\S3 }Add - Create a new spell
{\S3 }{\uldb Edit}{\v !KLink(Editing Spells)} - Modify an existing spell
{\S3 }Delete - Delete and existing spell
{\S3 }OK - Save changes and terminate spell edit
{\S3 }Cancel - Discard changes and terminate spell edit

{\cf9 Add Button}

Pressing the "Add" button causes a new s to be created with the name "New Spell" and default characteristics.  An edit dialog will appear with an "OK" and "Cancel" button.  Pressing the "Cancel" button cancels your request to add the spell and pressing the "OK" button adds the new spell to the {\uldb editor's internal database}{\v !ALink(InternalDatabase)}.

Before you add the new spell by pressing "OK" you will probably want to change some of the default characteristics but you should, at the very least, change its name to a {\uldb name that is unique}{\v !ALink(DatabaseObjectNames)} among spells.

{\cf9 Edit Button}

To {\uldb edit}{\v !KLink(Editing Spells)} an existing spell, select it >from the list of spells by clicking on its name (the selected item will be highlighted) and then pressing the "Edit" button.  The edit window showing the characteristics of the spell will appear, along with an "OK" button and a "Cancel" button.  Pressing "OK" incorporates your changes and pressing "Cancel" throws your changes into the bit bucket.

{\cf9 Delete Button}

To delete an existing spell, select it from the list of spells by clicking on its name (the selected item will be highlighted) and then pressing the "Delete" button.  The deletion is rather permanent.  Be careful.  The only way to get the spell back is to cancel all the editing you have done since opening the "Spell Editor" window.

{\cf9 OK Button}

Pressing the "OK" button means that you wish to accept all the changes you have made to the spells database and file them away in the editor's internal data structures.

{\cf9 Cancel Button}

Pressing the "Cancel" button means that any changes you have made to any of the spells since you opened this "Edit" window will be lost.  Be careful.
\page
\title Editing Monsters Database
\ident Editing_Monsters_Database
\keys Editing Monsters Database
\browse Editor_Database Utilities
\alink EditMonsters
\heading Editing Monsters Database

{\b\cf1 Editing Monsters Database}

The "Edit Monsters" option of the "Database" menu provides a means of viewing the names and characteristics of the monster data currently present in the editor's internal monster database.  It is this database that will be written to the game design folder and named "Monster.dat".

In actuality, you are editing a temporary copy of the monsters database and it will only become the permanent, working copy when you press the "OK" button".

When you first select the "Edit Monsters" option you will see a list of all the monsters along with five buttons:

{\S3 }Add - Create a new monster
{\S3 }Edit - Modify an existing monster
{\S3 }Delete - Delete and existing monster
{\S3 }OK - Save changes and terminate monster edit
{\S3 }Cancel - Discard changes and terminate monster edit

{\cf9 Add Button}

Pressing the "Add" button causes a new monster to be created with the name "New Monster" and default characteristics.  An edit dialog will appear with an "OK" and "Cancel" button.  Pressing the "Cancel" button cancels your request to add the monster and pressing the "OK" button adds the new monster to the {\uldb editor's internal database}{\v !ALink(InternalDatabase)}.

Before you add the new monster by pressing "OK" you will probably want to change some of the default characteristics but you should, at the very least, change its name to a {\uldb name that is unique}{\v !ALink(DatabaseObjectNames)} among monsters.

{\cf9 Edit Button}

To edit an existing monster, select it from the list of monsters by clicking on its name (the selected item will be highlighted) and then pressing the "Edit" button.  The edit window showing the characteristics of the monster will appear, along with an "OK" button and a "Cancel" button.  Pressing "OK" incorporates your changes and pressing "Cancel" throws your changes into the bit bucket.

{\cf9 Delete Button}

To delete an existing monster, select it from the list of monsters by clicking on its name (the selected item will be highlighted) and then pressing the "Delete" button.  The deletion is rather permanent.  Be careful.  The only way to get the monster back is to cancel all the editing you have done since opening the "Monster Editor" window.

{\cf9 OK Button}

Pressing the "OK" button means that you wish to accept all the changes you have made to the monsters database and file them away in the editor's internal data structures.

{\cf9 Cancel Button}

Pressing the "Cancel" button means that any changes you have made to any of the monsters since you opened this "Edit Monsters" window will be lost.  Be careful.
\page
\title Importing Binary Database
\ident Importing_Binary_Database
\keys Importing Binary Database
\browse Editor_Database Utilities
\alink ImportDatabaseBinaryFiles
\heading Importing Binary Database

{\b\cf1 Importing Binary Database}

Need prose
\page
\title Importing Text Database
\ident Importing_Text_Database
\keys Importing Text Database
\browse Editor_Database Utilities
\alink ImportDatabaseTextFiles
\heading Importing Text Database

{\b\cf1 Importing Text Database}

Need prose
\page
\title Exporting Text Database
\ident Exporting_Text_Database
\keys Exporting Text Database
\browse Editor_Database Utilities
\alink ExportDatabaseTextFiles
\heading Exporting Text Database

{\b\cf1 Exporting Text Database}

Need prose.
\page
\title Editing Text Database
\ident Editing_Text_Database
\keys Editing Text Database
\browse Editor_Database Utilities
\alink EditDatabaseTextFiles
\heading Editing Text Database

{\b\cf1 Editing Text Database}

Need prose
\page
\title Attribute Introduction
\ident Attribute_Introduction
\keys Attribute Introduction
\browse Editor_Attributes
\heading Attribute Introduction

{\b\cf1 Attribute Introduction}

Warning!  Do not confuse these attributes of the characters, the party, etc. with the "{\uldb Associated String Lists (ASLs)}{\v !ALink(Associated String Lists)}".  The ASLs can be used by the designer to add newly-invented attributes to characters.  For example you might add the attribute "Clean Shaven".  But the atributes we are talking about in this part of the help file are those attributes that are standard for all characters in the game.

Attribute names provide a way to access the values of some game variables. Attributes are currently used by the Logic Block event, spell definition, and GPDL scripts. An example attribute is $CHAR_THACO, and when this attribute is used it will be replaced during game play with the active character's THACO. Most attributes can be written to, but some of them are read only. When writing to an attribute full validation is performed to help ensure game stability.

There are three categories of attributes, character, party, and game. For most situations where an attribute can be used in the editor, there will be a list of available attributes provided to choose from. 

See:
{\uldb Character Attributes}{\v !KLink(Character Attributes)}
{\uldb Party Attributes}{\v !KLink(Party Attributes)}
{\uldb Game Attributes}{\v !KLink(Game Attributes)}
\page
\title Character Attributes
\ident Character_Attributes
\keys Character Attributes
\browse Editor_Attributes
\heading Character Attributes

{\b\cf1 Character Attributes}

The following attributes are available to reference character data. For each attribute the name, type, and read-only status is stated. 

{\f3
   Name                       Type   Read-Only   Notes
   ----                       ----   ---------   -----
   $CHAR_NAME                 Text     Yes       
   $CHAR_AC                   Number   No        armor class
   $CHAR_HITPOINTS            Number   No
   $CHAR_THACO                Number   No
   $CHAR_RDYTOTRAIN           Number   No        1 if ready to train else 0
   $CHAR_CLERICEXP            Number   No        experience
   $CHAR_MAGICUSEREXP         Number   No        
   $CHAR_FIGHTEREXP           Number   No        
   $CHAR_RANGEREXP            Number   No
   $CHAR_THIEFEXP             Number   No
   $CHAR_DRUIDEXP             Number   No
   $CHAR_PALADINEXP           Number   No
   $CHAR_AGE                  Number   No        current age
   $CHAR_MAXAGE               Number   No        maximum age
   $CHAR_MAXMOVE              Number   No        maximum movement rate
   $CHAR_STR                  Number   No        strength
   $CHAR_STRMOD               Number   No        0-100 strength bonus
   $CHAR_INT                  Number   No        intelligence
   $CHAR_WIS                  Number   No        wisdom
   $CHAR_DEX                  Number   No        dexterity
   $CHAR_CON                  Number   No        constitution
   $CHAR_CHA                  Number   No        charisma
   $CHAR_MAXENC               Number   No        max encumbrance
   $CHAR_ENC                  Number   Yes       current encumbrance
   {\uldb $CHAR_GENDER}{\v !KLink(Gender Values)}               Number   No    
   {\uldb $CHAR_CLASS}{\v !KLink(Class Values)}                Number   No
   {\uldb $CHAR_ALIGNMENT}{\v !KLink(Alignment Values)}            Number   No
   {\uldb $CHAR_STATUS}{\v !KLink(Status Values)}               Number   No        Okay, Dead, etc.
   {\uldb $CHAR_UNDEAD}{\v !KLink(Undead Values)}               Number   No        Undead type
   {\uldb $CHAR_SIZE}{\v !KLink(Size Values)}                 Number   No        large, medium, small
   $CHAR_MAGICRESIST          Number   No        magic resistance
   $CHAR_SAVEVSPPDM           Number   No        paralysis,poison,death magic
   $CHAR_SAVEVSPP             Number   No        petrification,polymorph
   $CHAR_SAVEVSRSW            Number   No        rod,staff,wand
   $CHAR_SAVEVSBR             Number   No        breath weapon
   $CHAR_SAVEVSSP             Number   No        spell
   $CHAR_CLERICLVL            Number   Yes       current levels 
   $CHAR_FIGHTERLVL           Number   Yes
   $CHAR_RANGERLVL            Number   Yes
   $CHAR_DRUIDLVL             Number   Yes
   $CHAR_PALADINLVL           Number   Yes
   $CHAR_THIEFLVL             Number   Yes
   $CHAR_MAGUSERLVL           Number   Yes
   $CHAR_CLERICPREVLVL        Number   Yes       previous levels, dual-class
   $CHAR_FIGHTERPREVLVL       Number   Yes
   $CHAR_RANGERPREVLVL        Number   Yes
   $CHAR_DRUIDPREVLVL         Number   Yes
   $CHAR_PALADINPREVLVL       Number   Yes
   $CHAR_THIEFPREVLVL         Number   Yes
   $CHAR_MAGUSERPREVLVL       Number   Yes
   $CHAR_CLERICPDLVL          Number   Yes       pre-drain levels
   $CHAR_FIGHTERPDLVL         Number   Yes
   $CHAR_RANGERPDLVL          Number   Yes
   $CHAR_DRUIDPDLVL           Number   Yes
   $CHAR_PALADINPDLVL         Number   Yes
   $CHAR_THIEFPDLVL           Number   Yes
   $CHAR_MAGUSERPDLVL         Number   Yes
   $CHAR_NBRHITDICE           Number   Yes       hit dice
   $CHAR_NBRATTACKS           Number   Yes       attacks per round
   $CHAR_MORALE               Number   No        current morale
   $CHAR_OPENDOORS            Number   No        
   $CHAR_OPENMAGICDOORS       Number   No
   $CHAR_BENDLIFT             Number   No        bend bars,lift gates
   $CHAR_PICKPOCKETS          Number   No        thief skills
   $CHAR_OPENLOCKS            Number   No
   $CHAR_FINDTRAPS            Number   No
   $CHAR_MOVESILENT           Number   No
   $CHAR_HIDESHADOWS          Number   No
   $CHAR_HEARNOISE            Number   No
   $CHAR_CLIMBWALLS           Number   No
   $CHAR_READLANG             Number   No
   $CHAR_ALLOWPLAYERCONTROL   Number   No        combat only
   $CHAR_DETECTMAGIC          Number   No        1 if detecting magic
   $CHAR_DETECTINVISIBLE      Number   No        1 if detecting invisible
   $CHAR_DETECTTRAPS          Number   No        1 if detecting traps
   $CHAR_DAMAGEBONUS          Number   No        
   $CHAR_BLESS                Number   No        special ability
   $CHAR_CURSE                Number   No        special ability
   $CHAR_UNDEADFEAR           Number   No        special ability
   $CHAR_ENLARGE              Number   No        special ability
   $CHAR_REDUCE               Number   No        special ability
   $CHAR_CHARMPERSON          Number   No        special ability
   $CHAR_REFLECTGAZEATTACK    Number   No        special ability
   $CHAR_PROTFROMEVIL         Number   No        special ability
   $CHAR_PROTFROMGOOD         Number   No        special ability
   $CHAR_SHIELD               Number   No        special ability
   $CHAR_SLEEP                Number   No        special ability
   $CHAR_FOG                  Number   No        special ability
   $CHAR_ENTANGLE             Number   No        special ability
   $CHAR_INVISIBLETOANIMALS   Number   No        special ability
   $CHAR_INVISIBLETOUNDEAD    Number   No        special ability
   $CHAR_NONUNDEADFEAR        Number   No        special ability
   $CHAR_SANCTUARY            Number   No        special ability
   $CHAR_SHILLELAGH           Number   No        special ability
   $CHAR_DISPLACEMENT         Number   No        special ability
   $CHAR_WIZARDRY             Number   No        special ability
   $CHAR_CHARTYPE             Number   Yes       1=PC,2=NPC,3=Monster
   $CHAR_VORPALATTACK         Number   No        special ability
   $CHAR_COINAMOUNT1          Number   No        current quantity of coin1
   $CHAR_COINAMOUNT2          Number   No
   $CHAR_COINAMOUNT3          Number   No
   $CHAR_COINAMOUNT4          Number   No
   $CHAR_COINAMOUNT5          Number   No
   $CHAR_COINAMOUNT6          Number   No
   $CHAR_COINAMOUNT7          Number   No
   $CHAR_COINAMOUNT8          Number   No
   $CHAR_COINAMOUNT9          Number   No
   $CHAR_COINAMOUNT10         Number   No
   $CHAR_GEMAMOUNT            Number   No        current quantity of gems
   $CHAR_JEWELRYAMOUNT        Number   No        current quantity of jewels
}
\page
\title Party Attributes
\ident Party_Attributes
\keys Party Attributes
\browse Editor_Attributes
\heading Party Attributes

{\b\cf1 Party Attributes}
The following attributes are available to reference party data. For each attribute the name, type, and read-only status is stated. 

{\f3
  Name                   Type    Read-Only   Notes
  ----                   ----    ---------   -----
  $PARTY_FACING          Number     No       current facing
  $PARTY_DAYS            Number     No       days since starting adventure
  $PARTY_HOURS           Number     No       0-23 format
  $PARTY_MINUTES         Number     No       
  $PARTY_ACTIVECHAR      Number     No       0 to (num party members-1)
  $PARTY_MONEYAVAILABLE  Number     Yes      return total funds available to party
                                             in terms of base coin (usually copper)
}
\page
\title Game Attributes
\ident Game_Attributes
\keys Game Attributes
\browse Editor_Attributes
\heading Game Attributes

{\b\cf1 Game Attributes}

The following attributes are available to reference character data. For each attribute the name, type, and read-only status is stated. 

{\f3
   Name              Type   Read-Only   Notes
   ----              ----   ---------   -----
  $GAME_CURRLEVEL    Number   Yes       current design level
  $GAME_VERSION      Number   Yes       design version
  $GAME_COINNAME1    Text     Yes       name of each coin type 1-10
  $GAME_COINNAME2
  $GAME_COINNAME3
  $GAME_COINNAME4
  $GAME_COINNAME5
  $GAME_COINNAME6
  $GAME_COINNAME7
  $GAME_COINNAME8
  $GAME_COINNAME9
  $GAME_COINNAME10
  $GAME_GEMNAME      Text     Yes       name for the gems
  $GAME_JEWELRYNAME  Text     Yes       name for the jewels
}
\page
\title Variable Tables
\ident Variable_Tables
\keys Variable Tables;Gender Values;Class Values;Alignment Values;Status Values;Undead Values;Size Values;Race Values
\browse Editor_Attributes
\heading Variable Tables
{\b\cf1 Variable Tables}
These tables provide equivalent values for textual data. When retrieving attributes you can use these tables to know if the value '1' means Human, Female, or any other value.

{\b\cf1 Gender Values}:
{\f3
  0=Male, 1=Female
}
{\b\cf1 Class Values}:
{\f3
  0=Fighter, 1=Cleric, 2=Ranger, 3=Paladin, 
  4=MagicUser, 5=Thief, 6=Druid, 7=Cleric/Fighter, 
  8=Cleric/Fighter/MagicUser, 9=Cleric/Ranger, 
  10=Cleric/MagicUser, 11=Cleric/Thief, 12=Fighter/MagicUser, 
  13=Fighter/Thief, 14=Figher/MagicUser/Thief, 
  15=MagicUser/Thief, 16=Fighter/Druid, 
  17=Druid/MagicUser, 18=Fighter/MagicUser/Druid
}
{\b\cf1 Alignment Values}:
{\f3
  0=LawfulGood, 1=NeutralGood, 2=ChaoticGood, 
  3=LawfulNeutral, 4=TrueNeutral, 5=ChaoticNeutral,  
  6=LawfulEvil, 7=NeutralEvil, 8=ChaoticEvil
}
{\b\cf1 Status Values}:
{\f3
  0=Okay, 1=Unconscious, 2=Dead, 
  3=Fled, 4=Petrified, 5=Gone, 
  6=Animated, 7=TempGone, 8=Running, 9=Dying
}
{\b\cf1 Undead Values}:
{\f3
  0=NotUndead, 1=Skeleton, 2=Zombie, 3=Ghoul, 
  4=Shadow, 5=Wight, 6=Ghast, 7=Wraith, 8=Mummy,
  9=Spectre, 10=Vampire, 11=Ghost, 12=Lich, 13=Special
}
{\b\cf1 Size Values}:
{\f3
  0=Small, 1=Medium, 2=Large
}
{\b\cf1 Race Values}:
{\f3
  0=Human, 1=Elf, 2=Dwarf, 3=Gnome, 4=HalfElf, 5=Halfling
}
\page
\title Playing Sounds
\ident Playing_Sounds
\keys Playing Sounds
\browse Editor_Sound
\heading Playing Sounds

{\b\cf1 Playing Sounds}

Dungeon Craft supports WAV, MIDI, and MP3 sound formats. DC relies on a free sound playback library called BASS ({\uldb http://www.un4seen.com}{\v !ExecFile(http://www.un4seen.com)}). Multiple WAV files can be played at the same time, but only a single MIDI or MP3 file can be played at once. BASS allows multiple MP3 files to play at once, but DC just doesn't support that yet. DC will be enhanced to allow this at some point.

The title screen music is looped, but no other sound can be looped.
\page
\title Introduction
\ident Introduction
\keys Introduction
\browse Tutorial
\heading Introduction
{\b\cf1 Introduction}

Have you ever thought after finishing a commercial Role Playing Game "I could have thought of a better ending" or  "I would have told this story better"? Have you ever had an idea and thought "This would make a great game, it is a pity that I am not able to program it"? With UAForever/Dungeon Craft you have the best tool to create your own game without programming abilities.

Originally based on the commercial DOS-game-designer {\i Unlimited Adventures} from SSI {\b UAForever/Dungeon Craft} was improved and extended counting in the wishes of designers. So {\b Dungeon Craft (DC)} is really almost unlimited in the possibilities  to create designs.

All you need is a good painting program or picture editor, the UAFWinEd.exe from {\b UAForever/Dungeon Craft}, and lots of creativity. With these tools you have the possibility to create whole new worlds.

But before you can start creating your own adventures you will need to learn how to use this tool. This chapter describes the major steps required in order to design your own role playing adventure. It assumes that you are familiar with Windows and Gold Box games or at least using menus and a mouse.

Next: {\uldb The Work Space}{\v !KLink(The Work Space)}



{\fs16 (c) Sigrid Elias}
{\fs16uldb selias19@gmx.net}{\v !ExecFile(mailto:selias19@gmx.net)}
\page
\title The Work Space
\ident The_Work_Space
\keys The Work Space
\browse Tutorial_General
\heading The Work Space

{\b\cf1 The Work Space}

A complete adventure is called design. All files needed for the design will be placed in the design-folder with the name-extension ".dsn". A design consists of several levels which provide the environment where the actions can take place. 

After starting the UAFWinEd.exe a window opens and shows the work space. Below the menu and the toolbar some text fields show information about the name of the design, the currently chosen mode, the name of the current level and its dimensions. There are also visible a background-picture with green sky and brown floor, a black and white map grid of the level with scroll bars and a little arrow in the upper left corner, a yellow rectangle for position information on the right, two smaller pictures showing a white wall and a smaller version of the big background above and a legend with several buttons and some color code. This will be the environment where everything you need can be created.

Next: {\uldb Designing an Adventure}{\v !KLink(Designing an Adventure)}


{\b The Work Space}

\{bmc images\\Workspace.bmp\}
\page
\title Designing an Adventure
\ident Designing_an_Adventure
\keys Designing an Adventure
\browse Tutorial_General
\heading Designing an Adventure

{\b\cf1 Designing an Adventure}

You will be the Dungeon Master in this adventure you are going to create. So you will need places, where the party can go, and events that will happen in these places. The party will meet NPC's (Non-Player-Characters). The Dungeon Master controls the actions of these NPC's whereas the player will control the actions of the party.
 
Some NPC's will join the party on their quest, some will just provide information or interact with the party and some will only fight the party. 
Also some art will be needed to represent those places and NPC's.


{\b\cf1 Places}

Your new design may include up to 255 different places which are called dungeons or overlands. Each dungeon and overland region is described by a map which you create and modify in the editor. The map grid for {\i Level 1} is currently shown in the right black and white square. 

One level can be as big as 100 x 100 squares. You can place doors and walls and backdrops into the squares of the map, thus building up a town or a wilderness for the player's party to explore. 


{\b\cf1 Events}

In some map squares, you may want to place specific events. You can choose from a wide variety of pre-defined types of events. Each type - a combat encounter, a text statement, a treasure discovery and so on - is specified by filling in a brief questionnaire in the event mode. Each questionnaire poses a set of related questions about one type of event. Which monster does the party fight? What text should the player see? How much treasure does the party discover? Just insert the parts of a questionnaire that need answers for the specific event you wish to design. 


{\b\cf1 Characters}

Any monsters or NPCs encountered during an event are specified in the {\uldb Monster Editor}{\v !KLink(Editing Monsters Database)}.  You have just to fill in the properties for the Monster or NPC. The properties are the attributes such as the character's race, ability, class, or alignment. Also the sounds the character makes at hit, or miss, or move, the combat icon that is displayed during combat and the items, if any, the character  possesses. There are already several predefined monsters and NPCs. You can use them or edit them or just add a new one.


{\b\cf1 Art}

Drawing a map, planning an event, or creating a special character generally includes making decisions about what art to display on the computer screen. Some types of art are used to show the background as the player's party moves, or as it engages in combat in a dungeon or an overland region. This art consists of various sets of walls, floors and ceilings, as well as overland regions and combat terrain. Other types of art, such as pictures and combat icons, are used to illustrate events and to depict characters. 

You can load any picture in the supported formats into the appropriate slots. They just have to have the right size to get displayed properly. For walls you need several different views. Currently DC supports four different types of walls, all of them are defined in the config.txt. Templates for two of these types are supplied with the DC setup, the third type is created by Phalzyr's Easywalltex program. You can even define your own type of wall by inserting the appropriate coordinates into the {\uldb config.txt}{\v !KLink(Config File)}. After choosing the appropriate wall image DC should automatically recognize the wall type.

Next: {\uldb Finding your Way around}{\v !KLink(Finding your Way around)}
\page
\title Finding your Way around
\ident Finding_your_Way_around
\keys Finding your Way around
\browse Tutorial_General
\heading Finding your Way around

{\b\cf1 Finding your Way around}

Only one level can be edited at a time. The name of the design and the currently open level is always displayed in the upper left corner of the {\uldb work space}{\v !KLink(The Work Space)}.

To choose a level to work with just click in the menu on {\b Level - Level List} or press {\b Crtl+L}. There you can choose a level by selecting it. You can also change the properties of the selected level, clear it out, delete it, or copy/paste it into another location. 

Normally you select one level to work on, make some changes to it, and then save or discard your changes and select a new level. You can perform these three steps again and again. The changes are saved permanently as soon as you press the {\b Save Icon} in the Toolbar. Please note that nothing will be saved automatically if you leave the editor without pressing the {\i Save Icon}.

The menu and toolbar options are working like standard windows options. Any short-cut is remarked in the menu. Often other dialogs open when a button is pressed or an option is selected.

Next: {\uldb Fixing Mistakes}{\v !KLink(Fixing Mistakes)}
\page
\title Fixing Mistakes
\ident Fixing_Mistakes
\keys Fixing Mistakes
\browse Tutorial_General
\heading Fixing Mistakes

{\b\cf1 Fixing Mistakes}

Since making mistakes and changing your mind are normal parts of any design process, DC makes it easy to undo changes. 

In every {\i Mode} that works on the initial work space you can reverse many simple actions by just pressing the right mouse button. Pressing this button takes back the item you click on. 

The {\i Event Mode} works a bit different since a new dialog is opened if you click on a square in the map grid. You can delete and revert your actions right in this dialog, you can even delete complete event chains.

If you save changes and later wish you hadn't, you might be able to recover the earlier version. It is always a good idea to back up your work, by keeping {\b backups} of the needed files when you have finished an editing session. That way, if you wish to discard all changes that you just saved, you can replace the adventure design in your UAF-directory with the backup copy. 

Next: {\uldb Constructing Places}{\v !KLink(Constructing Places)}
\page
\title Constructing Places
\ident Constructing_Places
\keys Constructing Places
\browse Tutorial_General
\heading Constructing Places

{\b\cf1 Constructing Places}

Each adventure level defines its own two-dimensional grid, or map, at least 10 by 10 squares in size. A square is one portion of a dungeon or overland region just large enough to contain the party. As in most {\i Gold Box} games, the party is always located in a particular map square in the current dungeon or overland region.

The map editor displays also a {\i 3D-view} of the current level. You edit the map of the current level by "drawing" on it with an imaginary pen. When you select new attributes for various map features, such as corridor walls or ceilings, this changes pens: drawing on the map now has a different effect than before. To draw, you simply click with the mouse into the map grid directly or on one of the three buttons named "Left", "Front Wall"/"Place...", and "Right". This transfers the current pen settings to that particular square, replacing whatever was there before.

Next: {\uldb Modes}{\v !KLink(Modes)}
\page
\title Modes
\ident Modes
\keys Modes
\browse Tutorial_General
\heading Modes

{\b\cf1 Modes}

Six kinds of features may be placed in a map and the editor has a corresponding mode for each kind. Depending upon which mode is selected in the {\i Menu} or {\i Toolbar} drawing with the current pen places walls, backdrops (floors and ceilings), events in selected squares, map zones, places entry points or the starting point for the game.


{\b\cf1 Walls}

Each edge of a dungeon map square may be unobstructed, so the party may cross it freely, or it may be blocked in some fashion. Normally, any square edge that is assigned an obstruction is also assigned a wall image. Wall images are pieces of art depicting solid walls, doors, archways, stairwells, and so on. Some images depict outdoor obstructions, such as shrubs or trees. 

Up to 48 different wall images can be loaded into each level. In the {\i Wall Mode} you just set the current pen to any one of these images.

Walls can also have different obstruction levels which can be defined by pressing the button "Select Wall Slot". The selected image and obstruction level is placed wherever you draw on the map. If you load a new image in the selected slot, all the walls assigned images from that set change appearance. By default 5 standard walls are loaded in wall slots 2 to 6. All the square edges are assigned to the no wall image in slot 1 and an obstruction level of "open".

For more information about placing walls look for the chapter {\uldb Walls}{\v !KLink(Place Walls)} in this help file or follow the {\uldb Step-by-Step}{\v !KLink(Creating a new Design)} instructions later on in this Tutorial.

Maps for {\i overland regions} are much simpler than those for dungeons. These maps never appear in {\i 3D-view}, so they do not use wall images. The only levels of obstruction available are "passable" and "impassable", and all four edges of a map square always share the same level of obstruction. By default all squares of an overland map are passable.

A level can be defined as being an Overland by choosing the radio button "Wilderness" in the level properties and loading a map-picture as background.


{\b\cf1 Backdrops}

{\i Backdrop} images can be placed on all four sides of each square. By default the same {\i Backdrop} is placed on all four sides but this feature can be unselected in the {\i Mode} menu. Also by default all squares are assigned to display the image loaded in backdrop slot 2. Backdrops are usually chosen to correspond with the building material or the general appearance of the wall images. Two backdrop images can be loaded into each backdrop slot: the default backdrop appears during daylight hours in the game, and the paired alternate backdrop appears automatically when the game is taking place at night. Night hours can be defined separately for each slot. Also a default step sound for the selected backdrop slot can be chosen, thus giving you the opportunity to have different step sounds on different floors.

Note that backdrops for map squares are different from the backdrops that represent combat terrain. The combat terrain images can be selected in the {\i Zone Mode}. For each Zone two combat images can be selected, one for indoor combat and one for outdoor combat. Since these combat terrain sets belong to the entire map, they are not placed in individual squares. 

{\i Overland maps} differ from dungeons in this respect as well. No backdrops are assigned to the individual squares of an overland map, since these maps never appear in 3D-view. Overland maps are always displayed using an overland map picture. The individual grid squares of an overland map are apparent only while editing, never during play.


{\b\cf1 Zones}

Each level may be divided into as many as 16 Zones. {\i Zones} may be assigned to group the squares of a dungeon into neighborhoods - for example, to mark off an outdoor field, or to distinguish different wings of a castle. The squares of one zone could also be scattered throughout a dungeon. Different events may be assigned to occur while the party is resting in each particular zone or after the party has taken a fixed number of steps in certain zones.

Unlike walls and backdrops, zones have no associated images. The zone to which a square is assigned is only displayed while the editor is in {\i Zone Mode}, and this assignment is not apparent from the 3D-view itself, or during the game. By default, all squares in the map are assigned to the first zone. The default name of this zone is "Zone 1", but you can rename it in the Zone Editor.

Zones are particularly important in {\i overland maps}, where they distinguish different kinds of outdoor terrain. A distinct message may also be assigned to each zone in an overland, to be displayed when the party attempts to enter that zone.


{\b\cf1 Events}

The principal action of a game takes place through the {\i Events} you create. Some events, such as those that take place during rest periods, are associated with the map as a whole. They are assigned in the event editor as {\i Rest Events} or {\i Step Events}. Other events are placed in individual map squares; these events happen when the party enters that particular square of your dungeon or overland region. A single level may contain no more than 16,777,215 different events.

If the editor is in {\i Event Mode} you can place an event in a map square. The {\uldb Event Viewer}{\v !KLink(Event Viewer)} opens and you can choose the {\i Event Type} from the drop down menu. You may "chain" additional events on the first, so that one event takes place right after another. By default no events are assigned to a dungeon or overland.


{\b\cf1 Entry Points}

The initial location of the party, when it enters a dungeon or overland region is specified with an {\i Entry Point}. This consists of a column and a row number, plus a compass direction. As many as eight different entry points may be set in each level, depending upon how many ways there are for the party to enter that particular dungeon or overland region. 
For example if your level shows a castle, setting an entry point just behind the castle gate would be a good idea. This way, whenever the party enters from another level into the castle level via {\i Transfer Module} event, they stand just behind the castle gate facing the direction you stated in the entry point. 


{\b\cf1 Starting Location}

When you first begin playing an adventure, the party starts out in the level and entry point specified in the {\i Starting Location Mode}. The beginning of your game doesn't have to be in {\i Level 1}. You can choose any of the levels by opening it through the {\i Level List} and setting the {\i Starting Location} where you want it to be.

Next: {\uldb Step by Step - Creating a new Design}{\v !KLink(Creating a new Design)}
\page
\title Creating a new Design
\ident Creating_a_new_Design
\keys Creating a new Design
\browse Tutorial_Step by Step
\heading Creating a new Design
{\b\cf1 Editing a Map}

The first step in this tutorial is to add a new corridor to a dungeon. You learn how to create a new design and enter the {\i Wall Mode}, and how to interpret the information you see there. You assign walls, backdrops, and zones to various squares in the map and practice undoing some of these changes.


{\b\cf1 Creating a new Design}

To create a new design, click in the File menu on {\b New...} 
A {\i Design Folder List} will appear, showing all the designs that are currently available in your UAF-folder. Just enter the name "Tutorial" in the field "Selected Design or Enter New Design Name" and press the OK-button. The window did not change visibly but in the Title bar you can see "Tutorial" and if you look into the UAF-directory on your hard disk you will find a new folder called "Tutorial.dsn". 

While creating the new design, DC has copied all the default art needed into your design directory. Therefore you will find several files in this new folder.

The Editor opened {\i Level 1} of the new Tutorial.dsn. Later you will learn how to rename the level into something more interesting and set the properties of the level.

You are now in the {\uldb Work Space}{\v !KLink(The Work Space)} described above.

Next: {\uldb Viewing a Map and Adding some Walls}{\v !KLink(Adding some Walls)}
\page
\title Adding some Walls
\ident Adding_some_Walls
\keys Adding some Walls
\browse Tutorial_Step by Step
\heading Adding some Walls

{\b\cf1 Adding some Walls}

The first line indicates that you are currently facing east. You can also see that you are currently editing column 0, row 0, in a map which total size is 50 by 50 squares.  The picture on the left shows only a bigger version of the small backdrop underneath. This is the {\i 3D-point of view window}. The picture on the right shows the overhead view or map of your immediate neighborhood; the white arrow marks the current square in this map and points in the direction you are facing.

If you move the mouse-cursor over the square where the little arrow is set you will notice, that in the yellow window to the right of the map, the map square information panel displays the state of the current square. It displays that all four walls are set to {\i Wall 1} and that their obstruction level is set to {\i open}. The set zone is {\i Zone 1} by default and all set backgrounds are currently set to {\i Background 2}. 

There is not much to see right now and since you are in the wall setting mode by default it is time to place some walls. Just click on the button {\b 3} in the {\i Legend} at the bottom of the window and click with this selection under the arrow in the map picture. You surely noticed that now in {\i 3D-view} you see a white wall on the right side. Congratulations, you just set your first wall onto the map. Repeat this wall setting with the other three directions around the arrow. Now the party would be set in a room with four identical walls. In the map window you see that the arrow is surrounded by a square of green lines.

Notice that all these walls have an obstruction level of "blocked", represented by the color code yellow.

In the map, each color of a grid square is a white dot. The color of the line drawn between two white dots corresponds to the wall image assigned for that edge of the map square. Since you choose wall 3 the lines between the dots became green. The smaller yellow squares represent the blockage. 

By default your movement is set to "Walk Thru Walls", which can be set in the {\i Mode menu}. Movement works with the arrow keys. By pressing the RIGHT-arrow on your keyboard you will notice that the small arrow is now facing south. Pressing the UP-arrow on the keyboard takes you one square south and out of the room you just created. 

That's nice in the editor but in the game, the party cannot move through blocked walls. Now this adventure is going to be pretty dull if the party can never escape from this rather boring room. It's time for some renovations. How about adding a door?

The current wall is displayed under the {\i 3D-view} Window. Now set this wall to wall 4 by clicking on {\b 4} in the {\i Legend}, but this time set its blockage to {\i Open}.

Turn around 180 degrees by pressing the DOWN-arrow on the keyboard. You should now face the white wall in the 3D-view and the arrow should point north towards the green square in the map-view. Use the button {\b Front Wall} just underneath the 3D-window and a door appears on the wall. Now the small room has a door through which the party can go. Press the UP-arrow on your keyboard again to enter the small room and turn around by pressing the DOWN-arrow. What is that? No door on the inside? This is because drawing walls with the buttons under the {\i 3D-view} only affects the inside edges of the current square - the ones you can actually see in the picture. Make sure you are still facing the south wall of the room and press the {\b Front Wall} button again. Now your new door looks and behaves the same on both sides. This will certainly be less confusing for players. Once in a while, of course, you may wish to be sneaky. You can deliberately create a one-way door or a door that is secret on one side, just like some of the {\i Gold Box} authors have done in the games. 

To get some more walls in the dungeon start building up some chambers, corridors and doors as you like. If you set a wall by mistake, just click with the right mouse-button on it and it will disappear. Look below to view an example for such a small setting.

Remember, that currently only the walls 2 to 7 are filled with pictures. You can get a list of all wall images by pressing the button {\b Select Wall Slot}. A new dialog opens and shows all wall slots with small pictures of the walls available. A new wall would be loaded by clicking on an empty wall slot and pressing the {\b Wall} button under the obstruction section. But due to the lack of appropriate wall images this cannot be done right now. 

To the right you may notice some more obstruction levels. A wall cannot only be open or blocked, but also for example {\i Locked} (only to open by a thief with a lockpick or by raw bashing) or {\i Open, Secret} (which will only be found if the party is searching).

To leave this dialog click on the {\b Close}-button.

If you are content with the walls you build up, you can continue with changing some of the backdrops.

First you should save what you have done until now. Just click on the small disk in the toolbar or choose the menu {\b File - Save}.

Next: {\uldb Placing Backdrops}{\v !KLink(Placing Backdrops)}

{\b Example for a Sample Dungeon:}

\{bmc images\\wallmode.bmp\}
\page
\title Placing Backdrops
\ident Placing_Backdrops
\keys Placing Backdrops
\browse Tutorial_Step by Step
\heading Placing Backdrops

{\b\cf1 Placing Backdrops}

The brown floor and the green sky look fine with the walls but maybe you should think about roofs for some of your chambers. You can change floor and ceiling images when the editor is in {\i Backdrop Mode}, so press the {\b B-button} in the toolbar now.
 
Notice that the walls in the area map appear simpler, since obstruction levels are only shown in wall mode. Also notice that all black squares in the map are filled with a small dark blue on every side.

To get an overview over the currently available backdrops press the {\b Select Backdrop}-button on the left side. A dialog window similar to the {\i Wall Slot Dialog} appears. {\i Backdrop 3} looks like a backdrop with a wooden roof. So that is the one to choose now.

If you double click on the slot or press the {\b Load Slot} button another window opens. This is the window where you can load other customized backdrops. Notice that there is also an alternate slot available. This is for showing a different backdrop by night. Close the {\i Background} window and the {\i Backdrop Selection} without changing anything. It is time to place the backdrop on the map.

Move the party cursor to a room on the map you have drawn. The room should be at least 2 x 2 squares big. As you already know, the movement works with the arrow keys but there is a shortcut to set the party into the square you wish: press the CRTL-button on your keyboard and left-click with the mouse into the square you want the party to be.

Now you can place {\i Backdrop 3} in the square where the small white arrow is by just left-clicking there with the mouse or by clicking on the button "Place Backdrop". Notice that the buttons "Left" and "Right" are dimmed now. If you did this correctly, the color-code for backdrop slot 3 - dark green - will now be on all four sides of the grid square you are in and the 3D-view should show the background with the wooden ceiling now. Keep on filling the room with the new backdrop now. If you went too far and drew in a square you didn't intend to fill with this new backdrop, you can easily restore {\i Backdrop 2} by clicking on the button 2 in the {\i Legend} and replace it again. 

Differently from {\i Unlimited Adventures} in {\i DC} it is possible to have different backdrops on each side of a square, having for example a moon shown in the west and a sun shown in the east. For this you have to de-select "Place Backdrop on all Sides" in the {\i Mode}-menu. Now only the backdrop in front of the party is replaced or the backdrop on the side you clicked on.

It is also possible to fill the whole map or parts of it with the currently chosen backdrop. You can do this by clicking in the Level menu on {\b Fill All Map - Backdrop - All Facings}.

Just play a little around with the different backdrops now. You will find that many interesting effects can be created with them.

If you are content with what you have done, it is time to save again.

Next: {\uldb Zone Placement}{\v !KLink(Zone Placement)}

{\b Example:}

\{bmc images\\backdropmode.bmp\}
\page
\title Zone Placment
\ident Zone_Placement
\keys Zone Placement
\browse Tutorial_Step by Step
\heading Zone Placement

{\b\cf1 Zone Placment}

Choose the {\b Z-button} in the toolbar. You are now in {\i Zone Placement Mode}. Notice that the map colors have changed. The walls are still visible but the {\i Backdrop} color code has changed. Now there are only black squares in each grid square of the  level. In the Legend you can see that black is the color code for {\i Zone 1}. Since the room you just changed is different from the rest of your dungeon, you might wish to make it a different zone as well. Chose {\i Zone 2} by clicking on the {\b 2} in the {\i Legend} and replace the black squares in your room with the blue ones.

Now that was easy, wasn't it? But right now, there is no difference between {\i Zone 1} and {\i Zone 2}, since they are all equal by default. How about making {\i Zone 2} different from {\i Zone 1}?

It is easy to achieve this. Just click on the {\b Select Zone button}. The {\i Zone Data Window} appears. Here you can change the name of the zone and some of the global settings, like for example the Camp Art. Since this zone is indoors the art should maybe be changed for indoor resting. Unfortunately you don't have another camp picture yet. Then maybe you don't want the party to rest in this zone. This can be triggered by selecting the {\i Cant Rest in this Zone}-option.
 
If you are content with your changes, press OK and return to the main editor.

Time to save again, don't you think?

Next: {\uldb Planning Actions: The Event Mode}{\v !KLink(The Event Mode)}

{\b Example:}

\{bmc images\\zonemode.bmp\}
\page
\title The Event Mode
\ident The_Event_Mode
\keys The Event Mode
\browse Tutorial_Step by Step
\heading The Event Mode

{\b\cf1 Planning Actions: The Event Mode}


Now that you have a location for your adventure design, you are ready to make something happen in that spot. The tutorial included in this chapter describes how to use the map editor to place events. 


{\b\cf1 Event Questionnaires}

Placing events in the  map editor takes you to the {\uldb Event Viewer}{\v !KLink(Event Viewer)}. Here you can specify what type of event you wish to
place in your map, and what will happen when that event takes place during a game. You do the latter by filling in the questionnaire describing the specific type of event you have placed.


{\b\cf1 Event Types}

Dungeon Craft supplies questionnaires for many different types of events, including events that lead to combat with monsters and events that help the party recuperate afterwards. Anything that can happen to the party during a game is represented in {\i DC} by a specific {\i event type}.

Each time you place a new event in a map, the event viewer opens and after you selected an event the appropriate questionnaire will pop up. An event questionnaire inquires about every aspect of that type of event that you could possibly change. For example, the questionnaire for combat event asks what types of monsters will be encountered, how many monsters of each type there will be, what those monsters look like, and so on. 

Next: {\uldb Designing a Text Event}{\v !KLink(Designing an Event)}
\page
\title Designing an Event
\ident Designing_an_Event
\keys Designing an Event
\browse Tutorial_Step by Step
\heading Designing an Event

{\b\cf1 Designing an Event}

This chapter will lead you through the steps of placing and editing a text event in one of the corridors or rooms you constructed in the previous chapter. You will fill in the answers in the {\i Text Statement}. Answering these questions will introduce you to several of the types of controls used in {\i DC}.

First you have to press the {\b E-button} in the toolbar. You are now in {\i Event Mode}.


{\b\cf1 Creating a New Event}

Set the party cursor in the square on the map where you want the event to happen. For example you could want to give the party information about the room with the roof you created. 

Notice that in {\i Event Mode} almost every other option is dimmed. There is only one option active, the {\b Place Event} button. Make sure that you are in the right position just behind the door inside your room and press this button or left-click with your mouse into the appropriate square on the map.

The {\i Event Viewer Dialog} appears. First you will have to select the type of event you want to create. You can select it by opening the {\i Event Type} list. Just click into the dialog field and select the event type {\i Text Statement}. 
Now click on the {\b Add}-button under the event tree. Another dialog appears with the specific questionnaire for the text event. Now you can decide on what the player sees, what the player hears and what he will read. Feel free to play around with the settings a bit. 

To add a picture, click on the button currently labled {\b Nothing} in the line {\i Player Sees}. The {\i Picture selection} will appear. This dialog will pop up whenever you want to select a picture for any event. Select {\i Small Picture} and click on the {\b Load/View}-button. Another dialog will appear where you can click on the {\b Load}-button.  Since you never loaded a picture before you have to click yourself through your sub folders. Select the {\i Tutorial.dsn} sub folder in your UAF-folder. There you should search for a picture beginning with "prt_...". These are the portraits. Choose one of the four default portraits that are supplied with {\i DC}. 

Repeat this procedure for choosing one of the default sounds that will be heard while the event is occurring.

Unlike {\i Unlimited Adventures} in {\i DC} there is only one textbox per {\i Text Statement} available. As stated in the dialog you can highlight text by toggling "/h". Just write the text {\b "This is a /h special /h room"}. 

If you are content with all the changes leave the Dialog with "OK" and save those changes by clicking on the {\b Save}-disk in the toolbar.

Next: {\uldb Testing a Design}{\v !KLink(Testing a Design)}
\page
\title Testing a Design
\ident Testing_a_Design
\keys Testing a Design
\browse Tutorial_Step by Step
\heading Testing a Design

{\b\cf1 Testing a Design}

Now that you have created a new text event it would be nice to see how it works. The best way to test how your design will actually look and feel to a game player is to play yourself.

If you want to test the part you have just designed there is a quick way to do that without leaving the editor.

Set the party cursor one square apart from your text event then click on the menu {\b Global - Test Saved Design - From Current Position}. If you didn't save, you will get a warning message to save before leaving the editor. But if everything is saved and ready the editor will minimize and the game engine will start. After you have clicked the title picture away, you will find your party consisting of only one person called "Super Spud" in {\i 3D-mode} at the location you defined. Take one step to the location where you set up your text event and watch it happen. You should see the picture you selected, you should hear the sound you selected and you should read the text you typed.

If you have enough walking around in this still rather vast dungeon, choose {\b Encamp} and {\b Leave Game} to return to the {\i Editor}.

Next: {\uldb Building a Chain of Events}{\v !KLink(Building an Event Chain)}
\page
\title Building an Event Chain
\ident Building_an_Event_Chain
\keys Building an Event Chain
\browse Tutorial_Step by Step
\heading Building an Event Chain

{\b\cf1 Building an Event Chain}

This chapter emphasizes some later steps in the design process: The repetitive cycle of modifying one existing level of your design, testing those modifications and then modifying that level again. When this cycle eventually finishes you will have completed another dungeon or overland region in your adventure.

You will now learn how to link one event to another so the second happens immediately after the first. You will also practice editing the resulting chain of events.

Now that you inserted a text statement, maybe you want the player to decide if the party should enter that special room. Why not inserting a short question to let the player make this decision?

Make sure that you are still in {\i Event Mode} and click at the white square you inserted on your map. The {\i Event Viewer} will open again, showing your {\i Text Statement} and its location. The {\b Add}-button under the event tree has changed and says now {\b Edit}. By clicking on that button you could change your existing event.

Now first of all, if you went around in that room and came back to the door, you surely saw that the event you created was repeated again and again. This can get a bit annoying, since the party already knows that this room is special. Therefore you should change the logics of this event a bit. Mark the {\i Text Statement} by left-clicking once with your mouse. Now select the option {\b Once Only} on the right. Now your event should only fire once and never again.

And now you are going to chain a {\b Question Yes/No} event.

To insert an event you should first click on the small {\b +}-symbol in front of your {\i Text Statement} in the event tree. The tree should expand and show the text {\i "Normal Chain: No Event"}. Mark this text, choose the {\i Question Yes/No} event in the event type list and click on the {\b Add}-button again. A new questionnaire opens. For "Player Sees" choose the same portrait you added before.

Place the text of the question into the "Player reads" field. You could for example write {\i "Do you want to enter this room?"}

The player has to make a choice now. So you will have to provide an answer for both possibilities. If the player selects {\b yes}, you could add a text like {\i "Welcome strangers."}. If the player selects {\b no}, the text could be {\i "Then leave immediately, please."}. For the {\b no}-chain the option {\i Backup One Step} in the {\i After Chain}" selection would be a good thing. Now that everything is filled out, select OK to return to the {\i Event Viewer}.

The event tree has changed. Now you can see below the initial {\i Text Statement} a chained statement called {\i Normal Chain: Question Yes/No}. If you expand the event tree by clicking on the {\b +}-symbol of the second event, you will notice that there are now 3 optional chains to insert events: {\i Normal Chain, Yes Chain} and {\i No Chain}. Since you marked the {\i No Chain} with {\i "Backup One Step"} it would be futile to insert any event there. {\i "Backup One Step"} takes the party into the square behind the current position. 

Now this is an aspect to keep in mind. The party would never be able to leave the room again if the {\i Question} event would always take place, since the player would surely press "No" if he wants to leave the room and then the party would be pushed back a square. So it might be a good idea to have the party facing the correct direction to trigger this event. To do this, mark the {\b Question Yes/No}-event by left-clicking on it and put the {\b Event Trigger} on {\i Facing dir, only when arrive}. Notice that now the field {\i Facing} was activated. Select the correct direction (in our Example {\b East}) and click on {\b Close} to leave the {\i Event Viewer}.

Save the design and test your new event like before. The first {\i Text Statement} should fire only once whereas the question should occur every time you enter the room.

If you want to change something in the texts or if you want to add a new event you can always go back, mark the event you want to change and press "Edit" or "Insert". This way you can have a long chain of events, taking place in this one square. The different event types and their different triggers are all explained in the help files.

Next: {\uldb Step Events}{\v !KLink(Step Events)}

{\b Example}

\{bmc images\\eventmode.bmp\}
\page
\title Step Events
\ident Step_Events
\keys Step Events
\browse Tutorial_Step by Step
\heading Step Events

{\b\cf1 Step Events}

Step Events are events assigned to one or more {\i Zones}. Up to 8 step events per level are possible, but you can create long chains with them, triggering one after the other (by setting each on {\i Once Only}) or by triggering it on {\i Random Chance}. A step event may be of any type. 

Enter the {\i Event Mode} and click on your already existing event to get the {\i Event Viewer}. Expand the {\i Event Tree} by clicking on the {\b +}-symbol in front of {\i Step Events}. A list with the 8 possible events opens, currently all set to {\i "No Event"}. Select the first {\i Step Event} and select {\b Combat} and press {\b Add}. 

Write into the "Player reads" field: {\i "You are under attack."} Select the Monster "Giant Rat" and let 2 of them start out nearby. Now you have to define where this {\i step event} will happen. Since you only have two defined zones, it should only happen in one of these zones, for example {\i Zone 1}.

Click on the {\b Step Events}-button below the event tree and define that this event should happen every {\i 10 steps} in {\i Zone 1}.

The first time the party takes a step in {\i Zone 1} the step counter will be set to zero. Each step the party takes while inside this zone will add one to this counter. Counting will stop as soon as the party moves out of the {\i Zone} into a map square with a different number. If the party re-enters any map square belonging to {\i Zone 1}, counting will start up again where it left off. As soon as the counter for this step event reaches the number 10, the counter is reset to zero and the designated event occurs.

Now save all and test your changes, if you want.


{\b\cf1 Rest Events}

{\i Rest Events} work exactly like {\i Step Events}. They are triggered each time the party tries to rest in the selected {\i Zone}. The only difference is that {\i Rest Events} only happen in the specified zone they were created for. If you want a for example a {\i Text Statement} happen while resting in {\i Zone 1} as well as in {\i Zone 4} you have to create that Text Statement twice as Rest Event for Zone 1 and as Rest Event for Zone 4.

{\i Rest events} interrupt the resting of the party, making it sometimes impossible to learn their magic spells or to heal their wounds in the particular zone. Usually they are simple {\i Text Statements}, stating the party should go to an inn to take their rest or a {\i Combat} event, simulating roaming monsters who found the sleeping party members. If they are triggered by {\i Random Chance} the party can be lucky and have an undisturbed night. 

Next: {\uldb Global Settings}{\v !KLink(Global Settings)}
\page
\title Global Settings
\ident Global_Settings
\keys Global Settings
\browse Tutorial_Step by Step
\heading Global Settings

{\b\cf1 Global Settings}

The edit-and-test process you carried out in the last chapter will be repeated many times until you have build a complete dungeon. The kinds of changes you will make and test, however are not all the same. So far, we have focused only on changes related to a particular location in the current level. This chapter introduces other changes you can make by editing the level properties.


{\b\cf1 Renaming a Level}

You cannot change information about the current adventure level as a whole by drawing on individual squares in a map. Instead you have to use the {\i Level Editor}. Select the menu {\b Level - Level List} (or press {\b CRTL+L}). Mark {\i Level 1} and activate the {\b Properties}-button. 

"Level 1" is not really helpful as description of this particular level. So replace the existing name in this dialog with anything that will help you to identify this particular module, for example "Sample Dungeon" (the player will never see this name, only you will). The name can be as long as 50 characters.

Also for this particular example, the dungeon size is far too big. Reduce it to a size of 10 x 10. 

As you can see, there are also {\i View Restrictions} possible and a particular {\i Step} or {\i Bump Sound}. Keep in mind that these settings are valid for the whole level and that {\i View Restrictions} will override the zone settings (as noted in the Dialog box).

Next: {\uldb Connecting Rooms}{\v !KLink(Connecting Rooms)}
\page
\title Connecting Rooms
\ident Connecting_Rooms
\keys Connecting Rooms
\browse Tutorial_Step by Step
\heading Connecting Rooms

{\b\cf1 Setting an Entry Point}

Setting an entry point is as easy as setting a wall somewhere. Select {\b P} from the toolbar to get into {\i Entry Point Mode}, then set the party cursor where you want to set up the entry point, choose the  number from the {\i Legend} and click on {\b Place Entry Pt}.

By default all eight entry points are set one below the other at 0,0 - 0,1 - 0,2 - 0,3...

{\b\cf1 Connecting rooms}

For this chapter you need a new room somewhere, inaccessible from the other part (see {\i Example} below).

Although you now have some interesting features in your sample dungeon, including chained and step events, the new room you just created is inaccessible from the other half. In the next chapter, two different methods are presented for connecting otherwise inaccessible locations in an adventure design.

Place {\i Entry Point 2} into the new inaccessible room.

Next: {\uldb Stairs, Teleporters, Transfer Modules}{\v !KLink(Transfer Modules)}

{\b Example:}

\{bmc images\\newRoom.bmp\}
\page
\title Transfer Modules
\ident Transfer_Modules
\keys Transfer Modules
\browse Tutorial_Step by Step
\heading Transfer Modules

{\b\cf1 Stairs, Teleporters, Transfer Modules}

In {\i Unlimited Adventures} there were three different events to carry the party to a different region of the map or even to another level. You can still find the events {\i Stairs} and {\i Teleporter} in the event list but in {\i DC} they are all linked with the {\i Transfer Module}. So there is no difference which kind of {\i Transfer} you choose.

Place a new event into one corner of your special room (for example the north-east corner). Select {\i Transfer Module} in the event list and add the new event.

In the new {\i Transfer Data} dialog you can choose if the party will be asked before transporting. Write a short question, like "Do you want to use the Teleporter?". Click on the {\b Teleport} button to define the destination. In this event this will be {\b Entry Point 2} in {\b Level 1}. De-select the option "Execute event at destination" and press {\b OK}. You can choose to write a small note the party will read after the transfer if you want.

Now the party will be transported to the new room whenever they enter the north-east corner of the special room and answer "yes".

Since the new room in our example doesn't have any doors or other exits, it would be better to give the party the opportunity to leave it via Teleporter again.

Set up a new event at the place where {\i Entry Point 2} was set to teleport the party back to where they came from. Remember to de-select "Execute event at destination" to not let them loop in and out. Use the {\b X,Y coordinates} to teleport them back.

Save your work and test it, if you like.


{\b\cf1 Connecting Dungeons:}
{\b\cf1 Linking Levels in a Design}

So far, you have seen how to modify only one adventure level - your sample dungeon. If your adventure design is to extend beyond this dungeon, you will need a way to link two levels together. You will accomplish this with the same feature you just used for the transfer in your module. 

To link your dungeon to another level, just place a {\i Transfer Module} somewhere in your sample dungeon (for example at 0,0). But instead of choosing {\i Level 1} in the {\i Teleport Data}, you use for example {\i Level 3}. Probably you noticed that {\i Level 3} has currently a width and height of 0. So before you can test the transfer module, you will have to define {\i Level 3}.

Just open the {\b Level List} (with {\b CRTL+L}), write a new name, set the height and width and leave by opening {\i Level 1} once more. 

Now save all and you are ready to test the transfer module.

Next: {\uldb Global Game Settings}{\v !KLink(Game Settings)}
\page
\title Game Settings
\ident Game_Settings
\keys Game Settings
\browse Tutorial_Step by Step
\heading Game Settings

{\b\cf1 Game Settings}

Now you learned almost all there is to know about creating a new design. All that is left is setting the overall global attributes for your game.

In the {\b Global} menu you will find the option {\b Global Settings}. This is where the overall look of the engine is defined. If you open it, you will not only see the name of the {\i Design} but also fields for all the starting equipment and where the frame pictures and default icons are defined. Here you could give Super Spud a short sword and some armor to defend himself against those rats he will encounter once in a while.

Everything is editable. Feel free to play around with all the settings.

Happy designing.
\page
